"""
–£–∑–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤ Tinkoff
"""

import logging
from typing import Annotated, Dict, Any, List

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from ..utils.tinkoff_client import get_tinkoff_client

logger = logging.getLogger(__name__)

@tool
async def search_instrument(ticker: str, instrument_type: str = "shares") -> str:
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–∫–µ—Ä—É (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API)
    
    Args:
        ticker: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "SBER", "GAZP", "MTLR")
        instrument_type: –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (shares, bonds, etfs)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
    """
    try:
        client = get_tinkoff_client()
        if not client:
            return f"‚ùå Tinkoff –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø–æ–∏—Å–∫–∞
        instruments = client.search_instruments(ticker, instrument_type)
        
        if not instruments:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–∏–ø–µ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
            alternative_types = ["shares", "bonds", "etfs", "currencies"]
            for alt_type in alternative_types:
                if alt_type != instrument_type:
                    try:
                        alt_instruments = client.search_instruments(ticker, alt_type)
                        if alt_instruments:
                            instruments = alt_instruments
                            break
                    except Exception:
                        continue
            
            if not instruments:
                return f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å —Ç–∏–∫–µ—Ä–æ–º '{ticker}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ç–∏–ø–µ"
        
        result = f"üîç **–ù–ê–ô–î–ï–ù–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –¥–ª—è '{ticker}':**\n\n"
        
        for i, instrument in enumerate(instruments, 1):
            result += f"**{i}. {instrument['ticker']}**\n"
            result += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {instrument['name']}\n"
            result += f"   FIGI: {instrument['figi']}\n"
            result += f"   –í–∞–ª—é—Ç–∞: {instrument.get('currency', 'N/A')}\n"
            result += f"   –õ–æ—Ç: {instrument.get('lot', 'N/A')}\n"
            result += f"   –¢–∏–ø: {instrument['instrument_type']}\n"
            result += f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã: {instrument.get('min_price_increment', 'N/A')}\n"
            result += "\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {ticker}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {str(e)}"

@tool
async def get_instrument_info(figi: str) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –ø–æ FIGI
    
    Args:
        figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
    """
    try:
        client = get_tinkoff_client()
        instrument = await client.get_instrument_by_figi(figi)
        
        if not instrument:
            return f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å FIGI '{figi}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        result = f"üìä **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ù–°–¢–†–£–ú–ï–ù–¢–ï:**\n\n"
        result += f"**–¢–∏–∫–µ—Ä:** {instrument['ticker']}\n"
        result += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {instrument['name']}\n"
        result += f"**FIGI:** {instrument['figi']}\n"
        result += f"**–í–∞–ª—é—Ç–∞:** {instrument['currency']}\n"
        result += f"**–õ–æ—Ç:** {instrument['lot']}\n"
        result += f"**–¢–∏–ø:** {instrument['instrument_type']}\n"
        result += f"**–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã:** {instrument['min_price_increment']}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        try:
            price_info = await client.get_current_price(figi)
            if price_info:
                result += f"\nüí∞ **–¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê:**\n"
                result += f"   –¶–µ–Ω–∞: {price_info['price']} {instrument['currency']}\n"
                result += f"   –í—Ä–µ–º—è: {price_info['time']}\n"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {figi}: {e}")
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {figi}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: {str(e)}"

@tool
async def get_current_price(figi: str) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    
    Args:
        figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
    """
    try:
        client = get_tinkoff_client()
        price_info = await client.get_current_price(figi)
        
        if not price_info:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è FIGI '{figi}'"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è –≤–∞–ª—é—Ç—ã
        try:
            instrument = await client.get_instrument_by_figi(figi)
            currency = instrument['currency'] if instrument else 'RUB'
        except:
            currency = 'RUB'
        
        result = f"üí∞ **–¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê:**\n\n"
        result += f"**FIGI:** {figi}\n"
        result += f"**–¶–µ–Ω–∞:** {price_info['price']} {currency}\n"
        result += f"**–í—Ä–µ–º—è:** {price_info['time']}\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {figi}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}"

@tool
async def find_figi_by_ticker(ticker: str, instrument_type: str = "shares") -> str:
    """
    –ü–æ–∏—Å–∫ FIGI –ø–æ —Ç–∏–∫–µ—Ä—É (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å, –ø–æ—Ç–æ–º API)
    
    Args:
        ticker: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        instrument_type: –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (shares, bonds, etfs)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å FIGI –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    """
    try:
        client = get_tinkoff_client()
        if not client:
            return f"‚ùå Tinkoff –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å - –µ—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ, –±–µ—Ä–µ–º FIGI –æ—Ç—Ç—É–¥–∞
        try:
            from ..nodes.portfolio import get_positions
            positions_result = await get_positions.ainvoke({"user_id": "default_user"})
            
            if "MTLR" in str(positions_result) or ticker.upper() in str(positions_result):
                # –ò—â–µ–º FIGI –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
                import re
                figi_pattern = rf'{ticker.upper()}\s*\([^)]+\)\s*\n\s*FIGI:\s*([A-Z0-9]+)'
                figi_match = re.search(figi_pattern, str(positions_result))
                
                if figi_match:
                    figi = figi_match.group(1)
                    result = f"üîç **FIGI –¥–ª—è —Ç–∏–∫–µ—Ä–∞ '{ticker}' (–Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ):**\n\n"
                    result += f"**1. {ticker.upper()}**\n"
                    result += f"   FIGI: `{figi}`\n"
                    result += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: –ù–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ\n"
                    result += f"   –¢–∏–ø: shares\n"
                    result += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: –ø–æ—Ä—Ç—Ñ–µ–ª—å\n"
                    result += "\n"
                    return result
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è {ticker}: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ, –∏—â–µ–º —á–µ—Ä–µ–∑ API
        instruments = client.search_instruments(ticker, instrument_type)
        
        if not instruments:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–∏–ø–µ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
            alternative_types = ["shares", "bonds", "etfs", "currencies"]
            for alt_type in alternative_types:
                if alt_type != instrument_type:
                    try:
                        alt_instruments = client.search_instruments(ticker, alt_type)
                        if alt_instruments:
                            instruments = alt_instruments
                            break
                    except Exception:
                        continue
            
            if not instruments:
                return f"‚ùå FIGI –¥–ª—è —Ç–∏–∫–µ—Ä–∞ '{ticker}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ, –Ω–∏ –≤ API"
        
        result = f"üîç **FIGI –¥–ª—è —Ç–∏–∫–µ—Ä–∞ '{ticker}' (–Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API):**\n\n"
        
        for i, instrument in enumerate(instruments, 1):
            result += f"**{i}. {instrument['ticker']}**\n"
            result += f"   FIGI: `{instrument['figi']}`\n"
            result += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {instrument['name']}\n"
            result += f"   –¢–∏–ø: {instrument['instrument_type']}\n"
            result += f"   –í–∞–ª—é—Ç–∞: {instrument.get('currency', 'N/A')}\n"
            result += f"   –õ–æ—Ç: {instrument.get('lot', 'N/A')}\n"
            result += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: API\n"
            result += "\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ FIGI –¥–ª—è {ticker}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ FIGI: {str(e)}"

@tool
async def get_instrument_details(ticker: str, instrument_type: str = "shares") -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –ø–æ —Ç–∏–∫–µ—Ä—É
    
    Args:
        ticker: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        instrument_type: –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (shares, bonds, etfs)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
    """
    try:
        client = get_tinkoff_client()
        instruments = client.search_instruments(ticker, instrument_type)
        
        if not instruments:
            return f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ç–∏–∫–µ—Ä–æ–º '{ticker}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        instrument = instruments[0]
        figi = instrument['figi']
        
        result = f"üìä **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ù–°–¢–†–£–ú–ï–ù–¢–ï:**\n\n"
        result += f"**–¢–∏–∫–µ—Ä:** {instrument['ticker']}\n"
        result += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {instrument['name']}\n"
        result += f"**FIGI:** {instrument['figi']}\n"
        result += f"**–í–∞–ª—é—Ç–∞:** {instrument['currency']}\n"
        result += f"**–õ–æ—Ç:** {instrument['lot']}\n"
        result += f"**–¢–∏–ø:** {instrument['instrument_type']}\n"
        result += f"**–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã:** {instrument['min_price_increment']}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        try:
            price_info = await client.get_current_price(figi)
            if price_info:
                result += f"\nüí∞ **–¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê:**\n"
                result += f"   –¶–µ–Ω–∞: {price_info['price']} {instrument['currency']}\n"
                result += f"   –í—Ä–µ–º—è: {price_info['time']}\n"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {figi}: {e}")
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {ticker}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"