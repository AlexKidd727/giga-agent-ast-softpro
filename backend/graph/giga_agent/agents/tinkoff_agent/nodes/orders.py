"""
–£–∑–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–¥–µ—Ä–∞–º–∏ –≤ Tinkoff
"""

import logging
from typing import Annotated, Dict, Any, List
from decimal import Decimal

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from ..utils.tinkoff_client import get_tinkoff_client

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Tinkoff API
try:
    from tinkoff.invest.schemas import OrderDirection, OrderType
    TINKOFF_SCHEMAS_AVAILABLE = True
except ImportError:
    try:
        from tinkoff_invest.models.order import OperationType as OrderDirection, OrderType
        TINKOFF_SCHEMAS_AVAILABLE = True
    except ImportError:
        TINKOFF_SCHEMAS_AVAILABLE = False
        OrderDirection = None
        OrderType = None

logger = logging.getLogger(__name__)

def format_money(money_value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã"""
    if money_value is None:
        return "0.00"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å units –∏ nano
    if hasattr(money_value, 'units') and hasattr(money_value, 'nano'):
        return f"{money_value.units}.{money_value.nano:09d}".rstrip('0').rstrip('.')
    
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    return f"{float(money_value):.2f}"

def validate_quantity(quantity: int, lot: int) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –ª–æ—Ç–Ω–æ—Å—Ç–∏"""
    if quantity <= 0:
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ª–æ—Ç–∞
    adjusted_quantity = (quantity // lot) * lot
    if adjusted_quantity == 0:
        adjusted_quantity = lot
    
    return adjusted_quantity

def validate_price(price: float) -> float:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã"""
    if price <= 0:
        raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    
    return float(price)

@tool
async def place_market_order(figi: str, quantity: int, direction: str) -> str:
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    
    Args:
        figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å —É—á–µ—Ç–æ–º –ª–æ—Ç–Ω–æ—Å—Ç–∏)
        direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (buy/sell, –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    """
    try:
        client = get_tinkoff_client()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–Ω–æ—Å—Ç–∏
        instrument = await client.get_instrument_by_figi(figi)
        if not instrument:
            return f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å FIGI '{figi}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        lot = instrument.get('lot', 1)
        ticker = instrument.get('ticker', 'N/A')
        name = instrument.get('name', 'N/A')
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –ª–æ—Ç–Ω–æ—Å—Ç–∏
        adjusted_quantity = validate_quantity(quantity, lot)
        
        if adjusted_quantity != quantity:
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å {quantity} –¥–æ {adjusted_quantity} (–ª–æ—Ç: {lot})")
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
        order = await client.place_market_order(figi, adjusted_quantity, direction)
        
        result = f"‚úÖ **–†–´–ù–û–ß–ù–´–ô –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù:**\n\n"
        result += f"**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:** {ticker} ({name})\n"
        result += f"**FIGI:** {figi}\n"
        result += f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {direction}\n"
        result += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {adjusted_quantity} (–ª–æ—Ç: {lot})\n"
        result += f"**ID –æ—Ä–¥–µ—Ä–∞:** {order['order_id']}\n"
        result += f"**–°—Ç–∞—Ç—É—Å:** {order['execution_report_status']}\n"
        
        if order.get('executed_order_price'):
            result += f"**–¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:** {format_money(order['executed_order_price'])}\n"
        
        if order.get('total_order_amount'):
            result += f"**–°—É–º–º–∞:** {format_money(order['total_order_amount'])}\n"
        
        if order.get('executed_commission'):
            result += f"**–ö–æ–º–∏—Å—Å–∏—è:** {format_money(order['executed_commission'])}\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {str(e)}"

@tool
async def place_limit_order(figi: str, quantity: int, price: float, direction: str) -> str:
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    
    Args:
        figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å —É—á–µ—Ç–æ–º –ª–æ—Ç–Ω–æ—Å—Ç–∏)
        price: –¶–µ–Ω–∞
        direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (buy/sell, –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    """
    try:
        client = get_tinkoff_client()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–Ω–æ—Å—Ç–∏
        instrument = await client.get_instrument_by_figi(figi)
        if not instrument:
            return f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å FIGI '{figi}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        lot = instrument.get('lot', 1)
        ticker = instrument.get('ticker', 'N/A')
        name = instrument.get('name', 'N/A')
        currency = instrument.get('currency', 'RUB')
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –ª–æ—Ç–Ω–æ—Å—Ç–∏
        adjusted_quantity = validate_quantity(quantity, lot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
        validated_price = validate_price(price)
        
        if adjusted_quantity != quantity:
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å {quantity} –¥–æ {adjusted_quantity} (–ª–æ—Ç: {lot})")
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
        order = await client.place_limit_order(figi, adjusted_quantity, validated_price, direction)
        
        result = f"‚úÖ **–õ–ò–ú–ò–¢–ù–´–ô –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù:**\n\n"
        result += f"**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:** {ticker} ({name})\n"
        result += f"**FIGI:** {figi}\n"
        result += f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {direction}\n"
        result += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {adjusted_quantity} (–ª–æ—Ç: {lot})\n"
        result += f"**–¶–µ–Ω–∞:** {validated_price} {currency}\n"
        result += f"**ID –æ—Ä–¥–µ—Ä–∞:** {order['order_id']}\n"
        result += f"**–°—Ç–∞—Ç—É—Å:** {order['execution_report_status']}\n"
        
        if order.get('executed_order_price'):
            result += f"**–¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:** {format_money(order['executed_order_price'])}\n"
        
        if order.get('total_order_amount'):
            result += f"**–°—É–º–º–∞:** {format_money(order['total_order_amount'])}\n"
        
        if order.get('executed_commission'):
            result += f"**–ö–æ–º–∏—Å—Å–∏—è:** {format_money(order['executed_commission'])}\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {str(e)}"

@tool
async def get_orders() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    """
    try:
        client = get_tinkoff_client()
        orders = await client.get_orders()
        
        if not orders:
            return "üìã **–ê–ö–¢–ò–í–ù–´–ï –û–†–î–ï–†–ê:** –û—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        result = f"üìã **–ê–ö–¢–ò–í–ù–´–ï –û–†–î–ï–†–ê ({len(orders)}):**\n\n"
        
        for i, order in enumerate(orders, 1):
            result += f"**{i}. –û—Ä–¥–µ—Ä #{order['order_id']}**\n"
            result += f"   FIGI: {order['figi']}\n"
            result += f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {order['direction']}\n"
            result += f"   –¢–∏–ø: {order['order_type']}\n"
            result += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['lots_requested']} (–∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {order['lots_executed']})\n"
            
            if order.get('initial_order_price'):
                result += f"   –¶–µ–Ω–∞: {format_money(order['initial_order_price'])}\n"
            
            if order.get('executed_order_price'):
                result += f"   –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {format_money(order['executed_order_price'])}\n"
            
            result += f"   –°—Ç–∞—Ç—É—Å: {order['execution_report_status']}\n"
            result += f"   –î–∞—Ç–∞: {order['order_date']}\n"
            result += "\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}"

@tool
async def cancel_order(order_id: str) -> str:
    """
    –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
    
    Args:
        order_id: ID –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
    """
    try:
        client = get_tinkoff_client()
        result = await client.cancel_order(order_id)
        
        response = f"‚úÖ **–û–†–î–ï–† –û–¢–ú–ï–ù–ï–ù:**\n\n"
        response += f"**ID –æ—Ä–¥–µ—Ä–∞:** {order_id}\n"
        response += f"**–°—Ç–∞—Ç—É—Å:** {result['execution_report_status']}\n"
        response += f"**–í—Ä–µ–º—è:** {result['time']}\n"
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞: {str(e)}"

@tool
async def buy_market(figi: str, quantity: int) -> str:
    """
    –ü–æ–∫—É–ø–∫–∞ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ
    
    Args:
        figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ–∫—É–ø–∫–∏
    """
    return await place_market_order.ainvoke({"figi": figi, "quantity": quantity, "direction": "buy"})

@tool
async def sell_market(figi: str, quantity: int) -> str:
    """
    –ü—Ä–æ–¥–∞–∂–∞ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ
    
    Args:
        figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–¥–∞–∂–∏
    """
    return await place_market_order.ainvoke({"figi": figi, "quantity": quantity, "direction": "sell"})

@tool
async def buy_limit(figi: str, quantity: int, price: float) -> str:
    """
    –ü–æ–∫—É–ø–∫–∞ –ø–æ –ª–∏–º–∏—Ç–Ω–æ–π —Ü–µ–Ω–µ
    
    Args:
        figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        price: –¶–µ–Ω–∞
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ–∫—É–ø–∫–∏
    """
    return await place_limit_order(figi, quantity, price, "buy")

@tool
async def sell_limit(figi: str, quantity: int, price: float) -> str:
    """
    –ü—Ä–æ–¥–∞–∂–∞ –ø–æ –ª–∏–º–∏—Ç–Ω–æ–π —Ü–µ–Ω–µ
    
    Args:
        figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        price: –¶–µ–Ω–∞
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–¥–∞–∂–∏
    """
    return await place_limit_order(figi, quantity, price, "sell")