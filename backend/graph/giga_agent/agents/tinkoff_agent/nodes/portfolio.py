"""
–£–∑–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –≤ Tinkoff
"""

import logging
from typing import Annotated, Dict, Any, List
from datetime import datetime

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from ..utils.tinkoff_client import get_tinkoff_client

logger = logging.getLogger(__name__)

def format_money(money_value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã"""
    if money_value is None:
        return "0.00"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å units –∏ nano
    if hasattr(money_value, 'units') and hasattr(money_value, 'nano'):
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è nano
        nano_str = f"{money_value.nano:09d}"
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ —Å–ø—Ä–∞–≤–∞
        nano_str = nano_str.rstrip('0')
        if not nano_str:
            return f"{money_value.units}.00"
        else:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ nano
            if money_value.units < 0 and money_value.nano > 0:
                # –ï—Å–ª–∏ units –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –∞ nano –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, –Ω—É–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                return f"{money_value.units}.{nano_str}"
            else:
                return f"{money_value.units}.{nano_str}"
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
    if isinstance(money_value, str):
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –¥–≤–æ–π–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            clean_str = money_value.replace('..', '.')
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞ "-1216.-63" -> "-1216.63" (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫ –º–∏–Ω—É—Å!)
            if '.-' in clean_str:
                clean_str = clean_str.replace('.-', '.')
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞ "-1216.-63" (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫ –º–∏–Ω—É—Å!)
            import re
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç "-1216.-63" -> "-1216.63"
            clean_str = re.sub(r'(-?\d+)\.-(\d+)', r'\1.\2', clean_str)
            return f"{float(clean_str):.2f}"
        except ValueError:
            return "0.00"
    
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    try:
        return f"{float(money_value):.2f}"
    except (ValueError, TypeError):
        return "0.00"

def format_quantity(quantity_value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫ –¥–ª—è —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–π)"""
    if quantity_value is None:
        return "0"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å units –∏ nano
    if hasattr(quantity_value, 'units') and hasattr(quantity_value, 'nano'):
        # –î–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ã—á–Ω–æ nano = 0, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ units (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫!)
        if quantity_value.nano == 0:
            return str(quantity_value.units)
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å nano, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫!)
            nano_str = f"{quantity_value.nano:09d}"
            nano_str = nano_str.rstrip('0')
            if not nano_str:
                return str(quantity_value.units)
            else:
                return f"{quantity_value.units}.{nano_str}"
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫!)
    try:
        return str(int(float(quantity_value)))
    except (ValueError, TypeError):
        return "0"

async def format_portfolio_positions(positions: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    if not positions:
        return "–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    result = []
    for pos in positions:
        figi = pos.get('figi', 'N/A')
        quantity = pos.get('quantity', 0)
        current_price = pos.get('current_price')
        expected_yield = pos.get('expected_yield')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        try:
            client = get_tinkoff_client()
            instrument_info = await client.get_instrument_by_figi(figi)
            if instrument_info:
                ticker = instrument_info.get('ticker', 'N/A')
                name = instrument_info.get('name', 'N/A')
                currency = instrument_info.get('currency', 'RUB')
                lot = instrument_info.get('lot', 1)  # –õ–æ—Ç–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            else:
                ticker = 'N/A'
                name = 'N/A'
                currency = 'RUB'
                lot = 1
        except:
            ticker = 'N/A'
            name = 'N/A'
            currency = 'RUB'
            lot = 1
        
        position_info = f"üìä {ticker} ({name})\n"
        position_info += f"   FIGI: {figi}\n"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –æ —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏
        quantity_str = format_quantity(quantity)
        if quantity_str.startswith('-'):
            position_info += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_str} (–ª–æ—Ç–Ω–æ—Å—Ç—å: {lot}) - –®–û–†–¢ –ø–æ–∑–∏—Ü–∏—è\n"
        else:
            position_info += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_str} (–ª–æ—Ç–Ω–æ—Å—Ç—å: {lot})\n"
        
        if current_price:
            position_info += f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {format_money(current_price)} {currency}\n"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ª–æ—Ç–Ω–æ—Å—Ç–∏
            try:
                qty_value = float(format_quantity(quantity))
                price_value = float(format_money(current_price))
                total_value = qty_value * price_value
                position_info += f"   üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} {currency}\n"
            except (ValueError, TypeError):
                position_info += f"   üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å\n"
        
        if expected_yield:
            position_info += f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {format_money(expected_yield)} {currency}\n"
        
        result.append(position_info)
    
    return "\n".join(result)

@tool
async def get_portfolio(user_id: str = "default_user") -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
    """
    try:
        client = get_tinkoff_client()
        portfolio = await client.get_portfolio()
        
        result = "üìà **–ü–û–†–¢–§–ï–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
        total_portfolio_value = 0
        try:
            total_portfolio_value += float(format_money(portfolio.get('total_amount_shares')))
            total_portfolio_value += float(format_money(portfolio.get('total_amount_bonds')))
            total_portfolio_value += float(format_money(portfolio.get('total_amount_etf')))
            total_portfolio_value += float(format_money(portfolio.get('total_amount_currencies')))
            total_portfolio_value += float(format_money(portfolio.get('total_amount_futures')))
        except (ValueError, TypeError):
            total_portfolio_value = 0
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        result += f"üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:** {total_portfolio_value:.2f} RUB\n\n"
        result += "üìä **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º:**\n"
        result += f"   –ê–∫—Ü–∏–∏: {format_money(portfolio.get('total_amount_shares'))} RUB\n"
        result += f"   –û–±–ª–∏–≥–∞—Ü–∏–∏: {format_money(portfolio.get('total_amount_bonds'))} RUB\n"
        result += f"   ETF: {format_money(portfolio.get('total_amount_etf'))} RUB\n"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç—ã —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –æ –¥–æ–ª–≥–µ
        currencies_amount = format_money(portfolio.get('total_amount_currencies'))
        if currencies_amount.startswith('-'):
            result += f"   –í–∞–ª—é—Ç—ã: {currencies_amount} RUB (–¥–æ–ª–≥)\n"
        else:
            result += f"   –í–∞–ª—é—Ç—ã: {currencies_amount} RUB\n"
            
        result += f"   –§—å—é—á–µ—Ä—Å—ã: {format_money(portfolio.get('total_amount_futures'))} RUB\n"
        
        expected_yield = portfolio.get('expected_yield')
        if expected_yield:
            result += f"   –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {format_money(expected_yield)} RUB\n"
        
        result += "\n"
        
        # –ü–æ–∑–∏—Ü–∏–∏
        positions = portfolio.get('positions', [])
        if positions:
            result += "üìä **–ü–û–ó–ò–¶–ò–ò:**\n\n"
            result += await format_portfolio_positions(positions)
        else:
            result += "üìä **–ü–û–ó–ò–¶–ò–ò:** –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {str(e)}"

@tool
async def get_all_accounts() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö —Å—á–µ—Ç–∞—Ö
    """
    try:
        client = get_tinkoff_client()
        accounts = client.get_accounts()
        
        if not accounts:
            return "üìã **–°–ß–ï–¢–ê:** –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        result = "üìã **–í–°–ï –°–ß–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
        
        for i, account in enumerate(accounts, 1):
            result += f"**{i}. {account['name']}**\n"
            result += f"   ID: {account['id']}\n"
            result += f"   –¢–∏–ø: {account['type']}\n"
            result += f"   –°—Ç–∞—Ç—É—Å: {account['status']}\n"
            if account['opened_date']:
                result += f"   –î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {account['opened_date']}\n"
            result += f"   –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {account['access_level']}\n\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤: {str(e)}"

@tool
async def get_portfolio_all_accounts() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º
    """
    try:
        client = get_tinkoff_client()
        all_portfolios = await client.get_portfolio_all_accounts()
        
        result = "üìà **–ü–û–†–¢–§–ï–õ–¨ –ü–û –í–°–ï–ú –°–ß–ï–¢–ê–ú**\n\n"
        result += f"üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π:** {all_portfolios['total_value']:.2f} RUB\n\n"
        
        for account_id, account_data in all_portfolios['accounts'].items():
            portfolio = account_data['portfolio']
            account_name = account_data['account_name']
            account_type = account_data['account_type']
            
            result += f"üè¶ **{account_name}** ({account_type})\n"
            result += f"   ID —Å—á–µ—Ç–∞: {account_id}\n"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
            account_value = 0
            try:
                account_value += float(format_money(portfolio.get('total_amount_shares')))
                account_value += float(format_money(portfolio.get('total_amount_bonds')))
                account_value += float(format_money(portfolio.get('total_amount_etf')))
                account_value += float(format_money(portfolio.get('total_amount_currencies')))
                account_value += float(format_money(portfolio.get('total_amount_futures')))
            except (ValueError, TypeError):
                pass
            
            result += f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {account_value:.2f} RUB\n"
            result += f"   üìä –ê–∫—Ü–∏–∏: {format_money(portfolio.get('total_amount_shares'))} RUB\n"
            result += f"   üìä –û–±–ª–∏–≥–∞—Ü–∏–∏: {format_money(portfolio.get('total_amount_bonds'))} RUB\n"
            result += f"   üìä ETF: {format_money(portfolio.get('total_amount_etf'))} RUB\n"
            
            # –ü–æ–∑–∏—Ü–∏–∏
            positions = portfolio.get('positions', [])
            if positions:
                result += f"   üìã –ü–æ–∑–∏—Ü–∏–π: {len(positions)}\n"
            else:
                result += f"   üìã –ü–æ–∑–∏—Ü–∏–π: 0\n"
            
            result += "\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º: {str(e)}"

@tool
async def get_positions_all_accounts() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏—è—Ö –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º
    """
    try:
        client = get_tinkoff_client()
        all_portfolios = await client.get_portfolio_all_accounts()
        
        result = "üìà **–ü–û–ó–ò–¶–ò–ò –ü–û –í–°–ï–ú –°–ß–ï–¢–ê–ú**\n\n"
        result += f"üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π:** {all_portfolios['total_value']:.2f} RUB\n\n"
        
        for account_id, account_data in all_portfolios['accounts'].items():
            portfolio = account_data['portfolio']
            account_name = account_data['account_name']
            account_type = account_data['account_type']
            
            result += f"üè¶ **{account_name}** ({account_type})\n"
            result += f"   ID —Å—á–µ—Ç–∞: {account_id}\n"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
            account_value = 0
            try:
                account_value += float(format_money(portfolio.get('total_amount_shares')))
                account_value += float(format_money(portfolio.get('total_amount_bonds')))
                account_value += float(format_money(portfolio.get('total_amount_etf')))
                account_value += float(format_money(portfolio.get('total_amount_currencies')))
                account_value += float(format_money(portfolio.get('total_amount_futures')))
            except (ValueError, TypeError):
                pass
            
            result += f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {account_value:.2f} RUB\n"
            result += f"   üìä –ê–∫—Ü–∏–∏: {format_money(portfolio.get('total_amount_shares'))} RUB\n"
            result += f"   üìä –û–±–ª–∏–≥–∞—Ü–∏–∏: {format_money(portfolio.get('total_amount_bonds'))} RUB\n"
            result += f"   üìä ETF: {format_money(portfolio.get('total_amount_etf'))} RUB\n"
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = portfolio.get('positions', [])
            if positions:
                result += f"   üìã –ü–æ–∑–∏—Ü–∏–π: {len(positions)}\n\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
                for position in positions:
                    figi = position.get('figi', 'N/A')
                    quantity = position.get('quantity', 0)
                    average_price = position.get('average_position_price', 0)
                    current_price = position.get('current_price', 0)
                    expected_yield = position.get('expected_yield', 0)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –ø–æ FIGI
                    ticker = "N/A"
                    name = "N/A"
                    instrument_type = "N/A"
                    
                    if figi != 'N/A':
                        try:
                            instrument_info = await client.get_instrument_by_figi(figi)
                            if instrument_info:
                                ticker = instrument_info.get('ticker', 'N/A')
                                name = instrument_info.get('name', 'N/A')
                                instrument_type = instrument_info.get('instrument_type', 'N/A')
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {figi}: {e}")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    avg_price_str = format_money(average_price)
                    curr_price_str = format_money(current_price)
                    yield_str = format_money(expected_yield)
                    quantity_str = format_quantity(quantity)
                    
                    result += f"   üìä **{ticker}** ({name})\n"
                    result += f"      FIGI: {figi}\n"
                    result += f"      –¢–∏–ø: {instrument_type}\n"
                    result += f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_str}\n"
                    result += f"      –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price_str} RUB\n"
                    result += f"      –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {curr_price_str} RUB\n"
                    result += f"      –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_str} RUB\n\n"
            else:
                result += f"   üìã –ü–æ–∑–∏—Ü–∏–π: 0\n\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º: {str(e)}"

@tool
async def get_positions(user_id: str = "default_user") -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏—è—Ö
    """
    try:
        client = get_tinkoff_client()
        portfolio = await client.get_portfolio()
        
        positions = portfolio.get('positions', [])
        if not positions:
            return "üìä **–ü–û–ó–ò–¶–ò–ò:** –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π
        total_portfolio_value = 0
        for position in positions:
            try:
                quantity = position.get('quantity', 0)
                current_price = position.get('current_price')
                figi = position.get('figi')
                
                if current_price and quantity and figi:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è –ª–æ—Ç–Ω–æ—Å—Ç–∏
                    try:
                        instrument_info = await client.get_instrument_by_figi(figi)
                        lot = instrument_info.get('lot', 1) if instrument_info else 1
                    except:
                        lot = 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    qty_value = float(format_quantity(quantity))
                    price_value = float(format_money(current_price))
                    
                    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ª–æ—Ç–Ω–æ—Å—Ç–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
                    position_value = qty_value * price_value
                    total_portfolio_value += position_value
                    
            except (ValueError, TypeError, AttributeError):
                continue
        
        result = f"üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:** {total_portfolio_value:.2f} RUB\n\n"
        result += "üìä **–ü–û–ó–ò–¶–ò–ò –í –ü–û–†–¢–§–ï–õ–ï:**\n\n"
        result += await format_portfolio_positions(positions)
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {str(e)}"

@tool
async def get_balance(user_id: str = "default_user") -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ —Å—á–µ—Ç–∞
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–ª–∞–Ω—Å–µ
    """
    try:
        client = get_tinkoff_client()
        portfolio = await client.get_portfolio()
        
        result = "üí∞ **–ë–ê–õ–ê–ù–° –°–ß–ï–¢–ê:**\n\n"
        
        # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        result += "üìà **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º:**\n"
        result += f"   –ê–∫—Ü–∏–∏: {format_money(portfolio.get('total_amount_shares'))} RUB\n"
        result += f"   –û–±–ª–∏–≥–∞—Ü–∏–∏: {format_money(portfolio.get('total_amount_bonds'))} RUB\n"
        result += f"   ETF: {format_money(portfolio.get('total_amount_etf'))} RUB\n"
        result += f"   –í–∞–ª—é—Ç—ã: {format_money(portfolio.get('total_amount_currencies'))} RUB\n"
        result += f"   –§—å—é—á–µ—Ä—Å—ã: {format_money(portfolio.get('total_amount_futures'))} RUB\n"
        
        # –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        expected_yield = portfolio.get('expected_yield')
        if expected_yield:
            result += f"\nüìä **–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {format_money(expected_yield)} RUB\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}"

@tool
async def get_portfolio_summary(user_id: str = "default_user") -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–æ–π –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
    """
    try:
        client = get_tinkoff_client()
        portfolio = await client.get_portfolio()
        
        result = "üìä **–°–í–û–î–ö–ê –ü–û –ü–û–†–¢–§–ï–õ–Æ:**\n\n"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π
        total_value = 0
        positions = portfolio.get('positions', [])
        
        for position in positions:
            try:
                quantity = position.get('quantity', 0)
                current_price = position.get('current_price')
                figi = position.get('figi')
                
                if current_price and quantity and figi:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è –ª–æ—Ç–Ω–æ—Å—Ç–∏
                    try:
                        instrument_info = await client.get_instrument_by_figi(figi)
                        lot = instrument_info.get('lot', 1) if instrument_info else 1
                    except:
                        lot = 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    qty_value = float(format_quantity(quantity))
                    price_value = float(format_money(current_price))
                    
                    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ª–æ—Ç–Ω–æ—Å—Ç–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
                    position_value = qty_value * price_value
                    total_value += position_value
                    
            except (ValueError, TypeError, AttributeError):
                continue
        
        result += f"üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:** {total_value:.2f} RUB\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Ç–∏–ø–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        result += "\nüìä **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º:**\n"
        result += f"   –ê–∫—Ü–∏–∏: {format_money(portfolio.get('total_amount_shares'))} RUB\n"
        result += f"   –û–±–ª–∏–≥–∞—Ü–∏–∏: {format_money(portfolio.get('total_amount_bonds'))} RUB\n"
        result += f"   ETF: {format_money(portfolio.get('total_amount_etf'))} RUB\n"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç—ã —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –æ –¥–æ–ª–≥–µ
        currencies_amount = format_money(portfolio.get('total_amount_currencies'))
        if currencies_amount.startswith('-'):
            result += f"   –í–∞–ª—é—Ç—ã: {currencies_amount} RUB (–¥–æ–ª–≥)\n"
        else:
            result += f"   –í–∞–ª—é—Ç—ã: {currencies_amount} RUB\n"
            
        result += f"   –§—å—é—á–µ—Ä—Å—ã: {format_money(portfolio.get('total_amount_futures'))} RUB\n"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
        positions = portfolio.get('positions', [])
        result += f"üìà **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:** {len(positions)}\n"
        
        # –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        expected_yield = portfolio.get('expected_yield')
        if expected_yield:
            try:
                yield_value = float(format_money(expected_yield))
                result += f"üìä **–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {yield_value:.2f} RUB\n"
                
                # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                if total_value > 0:
                    yield_percent = (yield_value / total_value) * 100
                    result += f"üìà **–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:** {yield_percent:.2f}%\n"
            except (ValueError, TypeError):
                result += f"üìä **–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {format_money(expected_yield)} RUB\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é: {str(e)}"