"""
–£–∑–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ Tinkoff
"""

import logging
from typing import Annotated, Dict, Any, List
from datetime import datetime, timedelta

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from ..utils.tinkoff_client import get_tinkoff_client

logger = logging.getLogger(__name__)

def format_money(money_value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã"""
    if money_value is None:
        return "0.00"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å units –∏ nano
    if hasattr(money_value, 'units') and hasattr(money_value, 'nano'):
        return f"{money_value.units}.{money_value.nano:09d}".rstrip('0').rstrip('.')
    
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    return f"{float(money_value):.2f}"

async def format_operations(operations: List[Dict[str, Any]], max_operations: int = 50) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
    
    Args:
        operations: –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
        max_operations: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not operations:
        return "–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    limited_operations = operations[:max_operations]
    
    result = []
    for i, op in enumerate(limited_operations, 1):
        op_info = f"**{i}. –û–ø–µ—Ä–∞—Ü–∏—è #{op.get('id', 'N/A')}**\n"
        op_info += f"   –¢–∏–ø: {op.get('operation_type', 'N/A')}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –ø–æ FIGI
        figi = op.get('figi', 'N/A')
        if figi and figi != 'N/A':
            try:
                from ..utils.tinkoff_client import get_tinkoff_client
                client = get_tinkoff_client()
                instrument_info = await client.get_instrument_by_figi(figi)
                if instrument_info:
                    ticker = instrument_info.get('ticker', 'N/A')
                    name = instrument_info.get('name', 'N/A')
                    op_info += f"   üìä {ticker} - {name}\n"
                else:
                    op_info += f"   FIGI: {figi}\n"
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {figi}: {e}")
                op_info += f"   FIGI: {figi}\n"
        else:
            op_info += f"   FIGI: {figi}\n"
        
        op_info += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {op.get('quantity', 'N/A')}\n"
        op_info += f"   –¶–µ–Ω–∞: {format_money(op.get('price', 0))}\n"
        op_info += f"   –°—É–º–º–∞: {format_money(op.get('payment', 0))}\n"
        op_info += f"   –í–∞–ª—é—Ç–∞: {op.get('currency', 'RUB')}\n"
        op_info += f"   –°—Ç–∞—Ç—É—Å: {op.get('state', 'N/A')}\n"
        op_info += f"   –î–∞—Ç–∞: {op.get('date', 'N/A')}\n"
        
        if op.get('trades'):
            op_info += f"   –°–¥–µ–ª–∫–∏: {len(op['trades'])}\n"
        
        result.append(op_info)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if len(operations) > max_operations:
        result.append(f"\n**–ü–æ–∫–∞–∑–∞–Ω–æ {max_operations} –∏–∑ {len(operations)} –æ–ø–µ—Ä–∞—Ü–∏–π. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —É—Ç–æ—á–Ω–∏—Ç–µ –ø–µ—Ä–∏–æ–¥.**")
    
    return "\n".join(result)

@tool
async def get_operations(from_date: str = None, to_date: str = None) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
    
    Args:
        from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    try:
        client = get_tinkoff_client()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not to_date:
            to_date = datetime.now().strftime("%Y-%m-%d")
        
        if not from_date:
            from_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ü–∏–π —Å {from_date} –ø–æ {to_date}")
        
        operations = client.get_operations(from_date, to_date)
        
        if not operations:
            return f"üìä **–û–ü–ï–†–ê–¶–ò–ò –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date}:** –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        result = f"üìä **–û–ü–ï–†–ê–¶–ò–ò –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date} ({len(operations)}):**\n\n"
        result += await format_operations(operations, max_operations=50)
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {str(e)}"

@tool
async def get_operations_today() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    """
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        return await get_operations(from_date=today, to_date=today)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {str(e)}"

@tool
async def get_operations_week() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é
    """
    try:
        to_date = datetime.now().strftime("%Y-%m-%d")
        from_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
        return await get_operations(from_date=from_date, to_date=to_date)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {str(e)}"

@tool
async def get_operations_month() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü
    """
    try:
        to_date = datetime.now().strftime("%Y-%m-%d")
        from_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        return await get_operations(from_date=from_date, to_date=to_date)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü: {str(e)}"

@tool
async def get_operations_by_type(operation_type: str, from_date: str = None, to_date: str = None) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
    
    Args:
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Buy", "Sell", "BrokerCommission")
        from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    """
    try:
        client = get_tinkoff_client()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not to_date:
            to_date = datetime.now().strftime("%Y-%m-%d")
        
        if not from_date:
            from_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        
        operations = client.get_operations(from_date, to_date)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        filtered_operations = [
            op for op in operations 
            if op.get('operation_type', '').lower() == operation_type.lower()
        ]
        
        if not filtered_operations:
            return f"üìä **–û–ü–ï–†–ê–¶–ò–ò —Ç–∏–ø–∞ '{operation_type}' –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date}:** –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        result = f"üìä **–û–ü–ï–†–ê–¶–ò–ò —Ç–∏–ø–∞ '{operation_type}' –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date} ({len(filtered_operations)}):**\n\n"
        result += await format_operations(filtered_operations, max_operations=50)
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Ç–∏–ø—É: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Ç–∏–ø—É: {str(e)}"

@tool
def get_operations_summary(from_date: str = None, to_date: str = None) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥
    
    Args:
        from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–≤–æ–¥–∫–æ–π –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    """
    try:
        client = get_tinkoff_client()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not to_date:
            to_date = datetime.now().strftime("%Y-%m-%d")
        
        if not from_date:
            from_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        
        operations = client.get_operations(from_date, to_date)
        
        if not operations:
            return f"üìä **–°–í–û–î–ö–ê –ü–û –û–ü–ï–†–ê–¶–ò–Ø–ú –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date}:** –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_operations = len(operations)
        operation_types = {}
        total_amount = 0
        
        for op in operations:
            op_type = op.get('operation_type', 'Unknown')
            operation_types[op_type] = operation_types.get(op_type, 0) + 1
            
            payment = op.get('payment', 0)
            if payment:
                total_amount += float(format_money(payment))
        
        result = f"üìä **–°–í–û–î–ö–ê –ü–û –û–ü–ï–†–ê–¶–ò–Ø–ú –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date}:**\n\n"
        result += f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π:** {total_operations}\n"
        result += f"**–û–±—â–∞—è —Å—É–º–º–∞:** {total_amount:.2f} RUB\n\n"
        
        result += "**–ü–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:**\n"
        for op_type, count in sorted(operation_types.items()):
            result += f"   {op_type}: {count}\n"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º: {str(e)}"
