"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Tinkoff –∞–≥–µ–Ω—Ç–∞
"""

import logging
from decimal import Decimal
from typing import Any, Dict, List, Optional, Tuple

from ..config import MAX_ORDER_AMOUNT, MIN_ORDER_AMOUNT, POPULAR_STOCKS

logger = logging.getLogger(__name__)

def find_stock_by_ticker(ticker: str) -> dict:
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–∫–µ—Ä—É —Å–Ω–∞—á–∞–ª–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ, –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ API
    
    Args:
        ticker: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER, IRKT)
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {"name": str, "figi": str} –∏–ª–∏ None
    """
    ticker_upper = ticker.upper()
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
    if ticker_upper in POPULAR_STOCKS:
        return POPULAR_STOCKS[ticker_upper]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ, –∏—â–µ–º —á–µ—Ä–µ–∑ API
    try:
        from ..utils.client import get_tinkoff_client
        
        client = get_tinkoff_client()
        if not client:
            logger.warning("Tinkoff –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return None
            
        with client.get_sync_client() as api_client:
            # –ò—â–µ–º —Å—Ä–µ–¥–∏ –∞–∫—Ü–∏–π
            try:
                shares_response = api_client.instruments.shares()
                
                for share in shares_response.instruments:
                    if share.ticker.upper() == ticker_upper:
                        return {
                            "name": share.name,
                            "figi": share.figi,
                            "ticker": share.ticker
                        }
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ API: {e}")
                
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ –∞–∫—Ü–∏–π, –∏—â–µ–º —Å—Ä–µ–¥–∏ ETF
            try:
                etfs_response = api_client.instruments.etfs()
                
                for etf in etfs_response.instruments:
                    if etf.ticker.upper() == ticker_upper:
                        return {
                            "name": etf.name,
                            "figi": etf.figi,
                            "ticker": etf.ticker
                        }
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ETF —á–µ—Ä–µ–∑ API: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {ticker} —á–µ—Ä–µ–∑ API: {e}")
    
    return None

def money_value_to_float(money_value: Any) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MoneyValue –≤ float"""
    try:
        if hasattr(money_value, 'units') and hasattr(money_value, 'nano'):
            return float(money_value.units + money_value.nano / 1_000_000_000)
        elif isinstance(money_value, dict):
            units = money_value.get('units', 0)
            nano = money_value.get('nano', 0)
            return float(units + nano / 1_000_000_000)
        else:
            return float(money_value)
    except (ValueError, TypeError):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {money_value} –≤ float")
        return 0.0

def quotation_to_float(quotation: Any) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Quotation –≤ float"""
    try:
        if hasattr(quotation, 'units') and hasattr(quotation, 'nano'):
            return float(quotation.units + quotation.nano / 1_000_000_000)
        elif isinstance(quotation, dict):
            units = quotation.get('units', 0)
            nano = quotation.get('nano', 0)
            return float(units + nano / 1_000_000_000)
        else:
            return float(quotation)
    except (ValueError, TypeError):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {quotation} –≤ float")
        return 0.0

def format_money(amount: float, currency: str = "RUB") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã"""
    if currency == "RUB":
        symbol = "‚ÇΩ"
    elif currency == "USD":
        symbol = "$"
    elif currency == "EUR":
        symbol = "‚Ç¨"
    else:
        symbol = currency
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    if abs(amount) >= 1000000:
        # –ú–∏–ª–ª–∏–æ–Ω—ã
        return f"{amount / 1000000:.2f}M {symbol}"
    elif abs(amount) >= 1000:
        # –¢—ã—Å—è—á–∏
        return f"{amount / 1000:.1f}k {symbol}"
    else:
        return f"{amount:.2f} {symbol}"

def validate_order_amount(amount: float) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞"""
    try:
        amount_decimal = Decimal(str(amount))
        
        if amount_decimal <= 0:
            return False, "–°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
        
        if amount_decimal < MIN_ORDER_AMOUNT:
            return False, f"–°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ {format_money(amount)} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {format_money(float(MIN_ORDER_AMOUNT))}"
        
        if amount_decimal > MAX_ORDER_AMOUNT:
            return False, f"–°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ {format_money(amount)} –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π {format_money(float(MAX_ORDER_AMOUNT))}"
        
        return True, "OK"
    except (ValueError, TypeError):
        return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã"

def validate_quantity(quantity: int) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ü–∏–π"""
    if not isinstance(quantity, int) or quantity <= 0:
        return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"
    
    if quantity > 10000:
        return False, "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π (–º–∞–∫—Å–∏–º—É–º 10,000)"
    
    return True, "OK"

def find_stock_by_ticker(ticker: str) -> Optional[Dict[str, str]]:
    """–ü–æ–∏—Å–∫ –∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä—É —á–µ—Ä–µ–∑ API (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫)"""
    ticker_upper = ticker.upper()
    
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
    try:
        from ..utils.client import get_tinkoff_client
        
        client = get_tinkoff_client()
        if not client:
            logger.warning("Tinkoff –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API")
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ search_instruments
        instruments = client.search_instruments(ticker_upper, "shares")
        if instruments:
            instrument = instruments[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
            logger.info(f"–ù–∞–π–¥–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker_upper} —á–µ—Ä–µ–∑ API: {instrument['name']}")
            return {
                "ticker": instrument['ticker'],
                "name": instrument['name'],
                "figi": instrument['figi']
            }
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ –∞–∫—Ü–∏–π, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
        for instrument_type in ["bonds", "etfs", "currencies"]:
            try:
                instruments = client.search_instruments(ticker_upper, instrument_type)
                if instruments:
                    instrument = instruments[0]
                    logger.info(f"–ù–∞–π–¥–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker_upper} —Ç–∏–ø–∞ {instrument_type} —á–µ—Ä–µ–∑ API: {instrument['name']}")
                    return {
                        "ticker": instrument['ticker'],
                        "name": instrument['name'],
                        "figi": instrument['figi']
                    }
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {instrument_type} —á–µ—Ä–µ–∑ API: {e}")
                continue
                
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker}: {e}")
    
    return None

def format_portfolio_positions(positions: List[Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not positions:
        return "üìà **–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç**\n\n–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    
    result = "üìà **–ü–æ—Ä—Ç—Ñ–µ–ª—å:**\n\n"
    total_value = 0.0
    
    for pos in positions:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            figi = getattr(pos, 'figi', 'Unknown')
            quantity = quotation_to_float(getattr(pos, 'quantity', 0))
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            if quantity == 0:
                continue
            
            # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
            instrument_name = "Unknown"
            ticker = "Unknown"
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –∞–∫—Ü–∏–π
            for stock_ticker, stock_info in POPULAR_STOCKS.items():
                if stock_info["figi"] == figi:
                    instrument_name = stock_info["name"]
                    ticker = stock_ticker
                    break
            else:
                # –ò—â–µ–º –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –≤–∞–ª—é—Ç
                from ..config import POPULAR_CURRENCIES
                for currency_ticker, currency_info in POPULAR_CURRENCIES.items():
                    if currency_info["figi"] == figi:
                        instrument_name = currency_info["name"]
                        ticker = currency_ticker
                        break
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ API
                    try:
                        from ..nodes.instruments import get_instrument_by_figi
                        instrument_info = get_instrument_by_figi(figi)
                        if instrument_info:
                            instrument_name = instrument_info["name"]
                            ticker = instrument_info["ticker"]
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ FIGI {figi}: {e}")
            
            # –†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            current_price = quotation_to_float(getattr(pos, 'current_price', 0))
            market_value = quantity * current_price
            total_value += market_value
            
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            average_price = quotation_to_float(getattr(pos, 'average_position_price', 0))
            
            # P&L
            pnl = market_value - (quantity * average_price) if average_price > 0 else 0
            pnl_percent = (pnl / (quantity * average_price) * 100) if average_price > 0 else 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–∑–∏—Ü–∏–∏
            pnl_emoji = "üìà" if pnl >= 0 else "üìâ"
            pnl_color = "üü¢" if pnl >= 0 else "üî¥"
            
            result += f"**{ticker}** ({instrument_name})\n"
            result += f"  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.0f} —à—Ç.\n"
            result += f"  üí∞ –¶–µ–Ω–∞: {format_money(current_price)}\n"
            result += f"  üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_money(market_value)}\n"
            result += f"  {pnl_emoji} P&L: {pnl_color} {format_money(pnl)} ({pnl_percent:+.2f}%)\n\n"
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            continue
    
    result += f"üíº **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:** {format_money(total_value)}"
    
    return result

def format_order_info(order: Any) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ"""
    try:
        order_id = getattr(order, 'order_id', 'Unknown')
        figi = getattr(order, 'figi', 'Unknown')
        direction = getattr(order, 'direction', 'Unknown')
        order_type = getattr(order, 'order_type', 'Unknown')
        lots_requested = getattr(order, 'lots_requested', 0)
        lots_executed = getattr(order, 'lots_executed', 0)
        
        # –¶–µ–Ω–∞
        initial_order_price = quotation_to_float(getattr(order, 'initial_order_price', 0))
        executed_order_price = quotation_to_float(getattr(order, 'executed_order_price', 0))
        
        # –°—Ç–∞—Ç—É—Å
        execution_report_status = getattr(order, 'execution_report_status', 'Unknown')
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        instrument_name = "Unknown"
        ticker = "Unknown"
        
        # –ò—â–µ–º –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –∞–∫—Ü–∏–π
        for stock_ticker, stock_info in POPULAR_STOCKS.items():
            if stock_info["figi"] == figi:
                instrument_name = stock_info["name"]
                ticker = stock_ticker
                break
        else:
            # –ò—â–µ–º –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –≤–∞–ª—é—Ç
            from ..config import POPULAR_CURRENCIES
            for currency_ticker, currency_info in POPULAR_CURRENCIES.items():
                if currency_info["figi"] == figi:
                    instrument_name = currency_info["name"]
                    ticker = currency_ticker
                    break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "üü¢" if direction == OrderDirection.ORDER_DIRECTION_BUY else "üî¥"
        direction_text = "–ü–æ–∫—É–ø–∫–∞" if direction == OrderDirection.ORDER_DIRECTION_BUY else "–ü—Ä–æ–¥–∞–∂–∞"
        
        # –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
        status_emoji = {
            "EXECUTION_REPORT_STATUS_FILL": "‚úÖ",
            "EXECUTION_REPORT_STATUS_NEW": "üîµ", 
            "EXECUTION_REPORT_STATUS_CANCELLED": "‚ùå",
            "EXECUTION_REPORT_STATUS_REJECTED": "üö´"
        }.get(str(execution_report_status), "‚ùì")
        
        result = f"{direction_emoji} **{direction_text} {ticker}** {status_emoji}\n"
        result += f"  üÜî ID: `{order_id}`\n"
        result += f"  üìä –õ–æ—Ç—ã: {lots_executed}/{lots_requested}\n"
        result += f"  üí∞ –¶–µ–Ω–∞: {format_money(initial_order_price)}\n"
        
        if executed_order_price > 0 and executed_order_price != initial_order_price:
            result += f"  ‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ –ø–æ: {format_money(executed_order_price)}\n"
        
        return result
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
        return f"–û—Ä–¥–µ—Ä {getattr(order, 'order_id', 'Unknown')}"

def calculate_lot_size(price: float, amount: float) -> int:
    """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ—Ç–æ–≤ –ø–æ —Å—É–º–º–µ"""
    if price <= 0:
        return 0
    
    lots = int(amount / price)
    return max(1, lots)  # –ú–∏–Ω–∏–º—É–º 1 –ª–æ—Ç

def format_instrument_info(instrument: Any) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ"""
    try:
        ticker = getattr(instrument, 'ticker', 'Unknown')
        name = getattr(instrument, 'name', 'Unknown')
        figi = getattr(instrument, 'figi', 'Unknown')
        currency = getattr(instrument, 'currency', 'Unknown')
        lot = getattr(instrument, 'lot', 1)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã
        min_price_increment = quotation_to_float(getattr(instrument, 'min_price_increment', 0))
        
        result = f"üìà **{ticker}** - {name}\n"
        result += f"  üÜî FIGI: `{figi}`\n"
        result += f"  üí± –í–∞–ª—é—Ç–∞: {currency}\n"
        result += f"  üì¶ –õ–æ—Ç: {lot} —à—Ç.\n"
        result += f"  üìè –®–∞–≥ —Ü–µ–Ω—ã: {min_price_increment}\n"
        
        return result
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ"
