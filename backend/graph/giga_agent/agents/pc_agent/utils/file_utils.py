"""
–§–∞–π–ª–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è PC Management Agent
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–¥–µ –∏–∑ evi-run-main/jarvis/jarvis_ai/utils/file_utils.py
"""

import os
import mimetypes
import logging
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple

from ..config import (
    ALLOWED_EXTENSIONS, DANGEROUS_EXTENSIONS, MAX_FILE_SIZE, 
    MAX_SEARCH_RESULTS, SEARCH_PATHS
)
from .system_utils import is_safe_path, format_file_size

logger = logging.getLogger(__name__)

def safe_read_file(file_path: str, max_size: int = MAX_FILE_SIZE) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not is_safe_path(file_path):
            return "‚ùå –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        
        if not os.path.exists(file_path):
            return "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if not os.path.isfile(file_path):
            return "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        if file_size > max_size:
            return f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({format_file_size(file_size)}). –ú–∞–∫—Å–∏–º—É–º: {format_file_size(max_size)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        extension = Path(file_path).suffix.lower()
        if extension and extension not in ALLOWED_EXTENSIONS:
            return f"‚ùå –¢–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {extension}"
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        try:
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
            encodings = ['utf-8', 'cp1251', 'latin-1']
            content = None
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as f:
                        content = f.read()
                    break
                except UnicodeDecodeError:
                    continue
            
            if content is None:
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
                with open(file_path, 'rb') as f:
                    binary_content = f.read(1024)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 1KB
                    return f"üìÑ **–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª**\n\n–ü–µ—Ä–≤—ã–µ 1024 –±–∞–π—Ç–∞:\n{binary_content.hex()}"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            if len(content) > 10000:
                content = content[:10000] + "\n\n... (—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω, –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10000 —Å–∏–º–≤–æ–ª–æ–≤)"
            
            return f"üìÑ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞**: `{os.path.basename(file_path)}`\n\n```\n{content}\n```"
            
        except PermissionError:
            return "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def get_file_type(file_path: str) -> Tuple[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ MIME-—Ç–∏–ø–∞"""
    try:
        mime_type, _ = mimetypes.guess_type(file_path)
        if mime_type is None:
            mime_type = "unknown"
        
        file_extension = Path(file_path).suffix.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–∞
        if file_extension in ['.txt', '.md', '.log', '.json', '.xml', '.csv']:
            category = "text"
        elif file_extension in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg']:
            category = "image"
        elif file_extension in ['.mp4', '.avi', '.mkv', '.mov', '.wmv']:
            category = "video"
        elif file_extension in ['.mp3', '.wav', '.flac', '.aac', '.ogg']:
            category = "audio"
        elif file_extension in ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx']:
            category = "document"
        elif file_extension in ['.zip', '.rar', '.7z', '.tar', '.gz']:
            category = "archive"
        elif file_extension in ['.exe', '.msi', '.bat', '.cmd']:
            category = "executable"
        elif file_extension in ['.py', '.js', '.html', '.css', '.cpp', '.java']:
            category = "code"
        else:
            category = "unknown"
        
        return category, mime_type
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return "unknown", "unknown"

def validate_file_operation(file_path: str, operation: str) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
        if not is_safe_path(file_path):
            return False, "–ü—É—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        if operation not in ['read', 'create', 'update', 'copy', 'move']:
            return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"
        
        # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists(file_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            extension = Path(file_path).suffix.lower()
            
            if operation in ['create', 'update'] and extension in DANGEROUS_EXTENSIONS:
                return False, f"–û–ø–µ—Ä–∞—Ü–∏—è {operation} –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ {extension}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if operation == 'read':
                file_size = os.path.getsize(file_path)
                if file_size > MAX_FILE_SIZE:
                    return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {format_file_size(file_size)}"
        
        return True, "OK"
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"

def find_files_recursive(directory: str, pattern: str, file_type: Optional[str] = None) -> List[Dict[str, Any]]:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    try:
        found_files = []
        pattern_lower = pattern.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not is_safe_path(directory):
            return [{"error": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π"}]
        
        if not os.path.exists(directory):
            return [{"error": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}]
        
        if not os.path.isdir(directory):
            return [{"error": "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π"}]
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        for root, dirs, files in os.walk(directory):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞
            level = root.replace(directory, '').count(os.sep)
            if level >= 5:  # –ú–∞–∫—Å–∏–º—É–º 5 —É—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                dirs[:] = []
                continue
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not d.startswith('.') and d.lower() not in ['__pycache__', 'node_modules']]
            
            for file in files:
                if len(found_files) >= MAX_SEARCH_RESULTS:
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                if pattern_lower not in file.lower():
                    continue
                
                file_path = os.path.join(root, file)
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                    stat = os.stat(file_path)
                    category, mime_type = get_file_type(file_path)
                    
                    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
                    if file_type and category != file_type.lower():
                        continue
                    
                    file_info = {
                        "name": file,
                        "path": file_path,
                        "directory": root,
                        "size": format_file_size(stat.st_size),
                        "size_bytes": stat.st_size,
                        "modified": stat.st_mtime,
                        "category": category,
                        "mime_type": mime_type,
                        "extension": Path(file).suffix.lower(),
                        "safe_to_read": category in ['text', 'code'] and stat.st_size <= MAX_FILE_SIZE
                    }
                    
                    found_files.append(file_info)
                    
                except (PermissionError, OSError):
                    continue
            
            if len(found_files) >= MAX_SEARCH_RESULTS:
                break
        
        return found_files
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ {directory}: {e}")
        return [{"error": str(e)}]

def get_directory_contents(directory: str, show_hidden: bool = False) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        if not is_safe_path(directory):
            return [{"error": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π"}]
        
        if not os.path.exists(directory):
            return [{"error": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}]
        
        if not os.path.isdir(directory):
            return [{"error": "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π"}]
        
        contents = []
        
        try:
            entries = os.listdir(directory)
            
            for entry in sorted(entries):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω—ã
                if not show_hidden and entry.startswith('.'):
                    continue
                
                entry_path = os.path.join(directory, entry)
                
                try:
                    stat = os.stat(entry_path)
                    is_dir = os.path.isdir(entry_path)
                    
                    item_info = {
                        "name": entry,
                        "path": entry_path,
                        "is_directory": is_dir,
                        "size": 0 if is_dir else stat.st_size,
                        "size_formatted": "–ø–∞–ø–∫–∞" if is_dir else format_file_size(stat.st_size),
                        "modified": stat.st_mtime,
                        "extension": "" if is_dir else Path(entry).suffix.lower()
                    }
                    
                    if not is_dir:
                        category, mime_type = get_file_type(entry_path)
                        item_info.update({
                            "category": category,
                            "mime_type": mime_type,
                            "safe_to_read": category in ['text', 'code'] and stat.st_size <= MAX_FILE_SIZE
                        })
                    
                    contents.append(item_info)
                    
                except (PermissionError, OSError) as e:
                    contents.append({
                        "name": entry,
                        "path": entry_path,
                        "error": f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {str(e)}"
                    })
        
        except PermissionError:
            return [{"error": "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"}]
        
        return contents
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {e}")
        return [{"error": str(e)}]

def create_text_file(file_path: str, content: str) -> Tuple[bool, str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        valid, error = validate_file_operation(file_path, 'create')
        if not valid:
            return False, error
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        extension = Path(file_path).suffix.lower()
        if extension and extension not in ['.txt', '.md', '.json', '.csv', '.log', '.py', '.js', '.html', '.css']:
            return False, f"–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ {extension} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if len(content.encode('utf-8')) > MAX_FILE_SIZE:
            return False, f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º: {format_file_size(MAX_FILE_SIZE)}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        directory = os.path.dirname(file_path)
        if directory and not os.path.exists(directory):
            os.makedirs(directory)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return True, f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_path}"
        
    except PermissionError:
        return False, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
