"""
–£–∑–ª—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π PC Management Agent
"""

import os
import logging
from typing import Annotated
from datetime import datetime

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from ..utils.file_utils import (
    safe_read_file, find_files_recursive, get_directory_contents,
    create_text_file, validate_file_operation
)
from ..utils.system_utils import is_safe_path, format_file_size
from ..config import SEARCH_PATHS, DESKTOP_PATH, DOCUMENTS_PATH, DOWNLOADS_PATH

logger = logging.getLogger(__name__)

@tool
async def search_files(
    pattern: str,
    directory: str = None,
    file_type: str = None,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    
    Args:
        pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
        directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ)
        file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (text, image, video, audio, document, code)
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not pattern or len(pattern) < 2:
            return {
                "error": True,
                "message": "‚ùå **–ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞**"
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_dirs = []
        if directory:
            if is_safe_path(directory):
                search_dirs = [directory]
            else:
                return {
                    "error": True,
                    "message": f"‚ùå **–î–æ—Å—Ç—É–ø –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{directory}' –∑–∞–ø—Ä–µ—â–µ–Ω**"
                }
        else:
            # –ü–æ–∏—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            search_dirs = [DESKTOP_PATH, DOCUMENTS_PATH, DOWNLOADS_PATH]
        
        all_results = []
        
        # –ü–æ–∏—Å–∫ –≤ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for search_dir in search_dirs:
            if os.path.exists(search_dir):
                results = find_files_recursive(search_dir, pattern, file_type)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—à–∏–±–∫–∏
                valid_results = [r for r in results if "error" not in r]
                all_results.extend(valid_results)
        
        if not all_results:
            search_locations = ", ".join([os.path.basename(d) for d in search_dirs])
            return {
                "success": True,
                "message": f"üîç **–ü–æ–∏—Å–∫ '{pattern}'**\n\n–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {search_locations}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞",
                "results_count": 0
            }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = sorted(all_results, key=lambda x: x.get('modified', 0), reverse=True)[:20]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        message = f"üîç **–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_results)}** (–ø–∞—Ç—Ç–µ—Ä–Ω: '{pattern}')\n\n"
        
        for i, file_info in enumerate(all_results[:10], 1):
            icon = {
                'text': 'üìÑ', 'code': 'üíª', 'image': 'üñºÔ∏è', 
                'video': 'üé¨', 'audio': 'üéµ', 'document': 'üìã', 
                'archive': 'üì¶', 'executable': '‚öôÔ∏è'
            }.get(file_info.get('category', 'unknown'), 'üìÑ')
            
            message += f"{icon} **{file_info['name']}**\n"
            message += f"  üìÅ `{file_info['directory']}`\n"
            message += f"  üìè {file_info['size']}"
            
            if file_info.get('safe_to_read'):
                message += " | üìñ –ú–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å"
            
            message += "\n\n"
        
        if len(all_results) > 10:
            message += f"... –∏ –µ—â–µ {len(all_results) - 10} —Ñ–∞–π–ª–æ–≤"
        
        return {
            "success": True,
            "message": message,
            "results_count": len(all_results),
            "files": all_results[:10]
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:** {str(e)}"
        }

@tool
async def open_file(
    file_path: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not is_safe_path(file_path):
            return {
                "error": True,
                "message": f"‚ùå **–î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω:** {file_path}"
            }
        
        if not os.path.exists(file_path):
            return {
                "error": True,
                "message": f"‚ùå **–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:** {file_path}"
            }
        
        if not os.path.isfile(file_path):
            return {
                "error": True,
                "message": f"‚ùå **–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º:** {file_path}"
            }
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            import subprocess
            subprocess.run(["start", "", file_path], shell=True, check=True)
            
            return {
                "success": True,
                "message": f"‚úÖ **–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç:** `{os.path.basename(file_path)}`\n\nüìÅ **–ü—É—Ç—å:** {file_path}",
                "file_path": file_path,
                "file_name": os.path.basename(file_path)
            }
            
        except subprocess.CalledProcessError as e:
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:** {str(e)}"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:** {str(e)}"
        }

@tool
async def read_file(
    file_path: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —á—Ç–µ–Ω–∏—è
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        content = safe_read_file(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª–∞—Å—å –ª–∏ –æ—à–∏–±–∫–∞
        if content.startswith("‚ùå"):
            return {
                "error": True,
                "message": content
            }
        
        return {
            "success": True,
            "message": content,
            "file_path": file_path,
            "file_name": os.path.basename(file_path)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:** {str(e)}"
        }

@tool
async def create_file(
    file_path: str,
    content: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        success, message = create_text_file(file_path, content)
        
        if success:
            file_size = len(content.encode('utf-8'))
            return {
                "success": True,
                "message": f"‚úÖ **–§–∞–π–ª —Å–æ–∑–¥–∞–Ω:** `{os.path.basename(file_path)}`\n\nüìÅ **–ü—É—Ç—å:** {file_path}\nüìè **–†–∞–∑–º–µ—Ä:** {format_file_size(file_size)}",
                "file_path": file_path,
                "file_name": os.path.basename(file_path),
                "file_size": file_size
            }
        else:
            return {
                "error": True,
                "message": f"‚ùå **{message}**"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞:** {str(e)}"
        }

@tool
async def file_info(
    file_path: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not is_safe_path(file_path):
            return {
                "error": True,
                "message": f"‚ùå **–î–æ—Å—Ç—É–ø –∫ –ø—É—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω:** {file_path}"
            }
        
        if not os.path.exists(file_path):
            return {
                "error": True,
                "message": f"‚ùå **–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω:** {file_path}"
            }
        
        stat = os.stat(file_path)
        is_dir = os.path.isdir(file_path)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        created_time = datetime.fromtimestamp(stat.st_ctime).strftime("%d.%m.%Y %H:%M")
        modified_time = datetime.fromtimestamp(stat.st_mtime).strftime("%d.%m.%Y %H:%M")
        
        if is_dir:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try:
                contents = os.listdir(file_path)
                files_count = len([f for f in contents if os.path.isfile(os.path.join(file_path, f))])
                dirs_count = len([f for f in contents if os.path.isdir(os.path.join(file_path, f))])
                
                message = f"""üìÅ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ**

üìõ **–ò–º—è:** `{os.path.basename(file_path)}`
üìç **–ü—É—Ç—å:** `{file_path}`

üìä **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**
‚Ä¢ –§–∞–π–ª–æ–≤: {files_count}
‚Ä¢ –ü–∞–ø–æ–∫: {dirs_count}
‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(contents)}

üìÖ **–î–∞—Ç—ã:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {created_time}
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–æ: {modified_time}"""
                
            except PermissionError:
                message = f"""üìÅ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ**

üìõ **–ò–º—è:** `{os.path.basename(file_path)}`
üìç **–ü—É—Ç—å:** `{file_path}`

‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ø–∞–ø–∫–∏**

üìÖ **–î–∞—Ç—ã:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {created_time}
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–æ: {modified_time}"""
        else:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            from ..utils.file_utils import get_file_type
            category, mime_type = get_file_type(file_path)
            
            message = f"""üìÑ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ**

üìõ **–ò–º—è:** `{os.path.basename(file_path)}`
üìç **–ü—É—Ç—å:** `{file_path}`

üìè **–†–∞–∑–º–µ—Ä:** {format_file_size(stat.st_size)}
üè∑Ô∏è **–¢–∏–ø:** {category}
üìã **MIME:** {mime_type}
üìÑ **–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ:** {os.path.splitext(file_path)[1] or '–Ω–µ—Ç'}

üìÖ **–î–∞—Ç—ã:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {created_time}
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–æ: {modified_time}"""
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            if category in ['text', 'code'] and stat.st_size <= 1024 * 1024:  # 1MB
                message += "\n\nüí° **–§–∞–π–ª –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ read_file**"
        
        return {
            "success": True,
            "message": message,
            "file_path": file_path,
            "is_directory": is_dir,
            "size": stat.st_size
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_path}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:** {str(e)}"
        }

@tool
async def list_directory(
    directory: str = None,
    show_hidden: bool = False,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ–º–∞—à–Ω—è—è –ø–∞–ø–∫–∞)
        show_hidden: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if directory is None:
            directory = os.path.expanduser("~")
        
        contents = get_directory_contents(directory, show_hidden)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if contents and "error" in contents[0]:
            return {
                "error": True,
                "message": f"‚ùå **{contents[0]['error']}**"
            }
        
        if not contents:
            return {
                "success": True,
                "message": f"üìÅ **–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞:** `{os.path.basename(directory)}`\n\nüìç **–ü—É—Ç—å:** {directory}",
                "directory": directory,
                "items_count": 0
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
        directories = [item for item in contents if item.get('is_directory', False)]
        files = [item for item in contents if not item.get('is_directory', False)]
        
        message = f"üìÅ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:** `{os.path.basename(directory)}`\n\nüìç **–ü—É—Ç—å:** {directory}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        if directories:
            message += f"üìÇ **–ü–∞–ø–∫–∏ ({len(directories)}):**\n"
            for dir_item in directories[:15]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                name = dir_item['name']
                if len(name) > 50:
                    name = name[:47] + "..."
                message += f"‚Ä¢ {name}\n"
            
            if len(directories) > 15:
                message += f"... –∏ –µ—â–µ {len(directories) - 15} –ø–∞–ø–æ–∫\n"
            message += "\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        if files:
            message += f"üìÑ **–§–∞–π–ª—ã ({len(files)}):**\n"
            for file_item in files[:15]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                icon = {
                    'text': 'üìÑ', 'code': 'üíª', 'image': 'üñºÔ∏è', 
                    'video': 'üé¨', 'audio': 'üéµ', 'document': 'üìã', 
                    'archive': 'üì¶', 'executable': '‚öôÔ∏è'
                }.get(file_item.get('category', 'unknown'), 'üìÑ')
                
                name = file_item['name']
                if len(name) > 40:
                    name = name[:37] + "..."
                
                message += f"{icon} {name} ({file_item['size_formatted']})\n"
            
            if len(files) > 15:
                message += f"... –∏ –µ—â–µ {len(files) - 15} —Ñ–∞–π–ª–æ–≤\n"
        
        message += f"\nüìä **–ò—Ç–æ–≥–æ:** {len(directories)} –ø–∞–ø–æ–∫, {len(files)} —Ñ–∞–π–ª–æ–≤"
        
        return {
            "success": True,
            "message": message,
            "directory": directory,
            "items_count": len(contents),
            "directories_count": len(directories),
            "files_count": len(files)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:** {str(e)}"
        }
