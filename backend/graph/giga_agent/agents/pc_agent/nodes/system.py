"""
–£–∑–ª—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π PC Management Agent
"""

import os
import subprocess
import logging
from typing import Annotated

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from ..utils.system_utils import (
    get_installed_programs, find_program_by_name, get_system_statistics,
    get_process_info, is_executable_safe
)
from ..config import IS_WINDOWS, COMMON_PROGRAMS

logger = logging.getLogger(__name__)

@tool
async def get_system_info(user_id: str = "default_user", state: Annotated[dict, InjectedState] = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        stats = get_system_statistics()
        
        if "error" in stats:
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ:** {stats['error']}"
            }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        message = f"""üñ•Ô∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ**

üíª **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:**
‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {stats['platform']['system']} {stats['platform']['release']}
‚Ä¢ –í–µ—Ä—Å–∏—è: {stats['platform']['version']}
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {stats['platform']['machine']}
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {stats['platform']['processor']}

‚ö° **–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:**
‚Ä¢ –Ø–¥–µ—Ä: {stats['cpu']['count']}
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {stats['cpu']['percent']:.1f}%"""

        if stats['cpu']['frequency']:
            message += f"\n‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {stats['cpu']['frequency']['current']:.0f} MHz"

        message += f"""

üß† **–ü–∞–º—è—Ç—å:**
‚Ä¢ –í—Å–µ–≥–æ: {stats['memory']['total']}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {stats['memory']['available']}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['memory']['used']} ({stats['memory']['percent']:.1f}%)

üíæ **–î–∏—Å–∫–∏:**"""

        for disk in stats['disks'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –¥–∏—Å–∫–∞
            message += f"""
‚Ä¢ **{disk['device']}** ({disk['fstype']})
  - –†–∞–∑–º–µ—Ä: {disk['total']}
  - –°–≤–æ–±–æ–¥–Ω–æ: {disk['free']} ({100-disk['percent']:.1f}%)"""

        message += f"""

üåê **–°–µ—Ç—å:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['network']['bytes_sent']}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {stats['network']['bytes_recv']}

‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:** {int((os.times().elapsed if hasattr(os, 'times') else 0) / 3600)} —á–∞—Å–æ–≤"""

        return {
            "success": True,
            "message": message,
            "stats": stats
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ:** {str(e)}"
        }

@tool
async def run_program(
    program_name: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    
    Args:
        program_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not IS_WINDOWS:
            return {
                "error": True,
                "message": "‚ùå **–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows**"
            }
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        program_path = find_program_by_name(program_name)
        
        if not program_path:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            program_lower = program_name.lower()
            if program_lower in COMMON_PROGRAMS:
                program_path = COMMON_PROGRAMS[program_lower]
            else:
                available_programs = list(COMMON_PROGRAMS.keys())[:10]
                return {
                    "error": True,
                    "message": f"‚ùå **–ü—Ä–æ–≥—Ä–∞–º–º–∞ '{program_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\nüìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**\n" + 
                              "\n".join([f"‚Ä¢ {prog}" for prog in available_programs])
                }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not is_executable_safe(program_path):
            return {
                "error": True,
                "message": f"‚ùå **–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã '{program_name}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**"
            }
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        try:
            if program_path.endswith(('.exe', '.bat', '.cmd')):
                # –ó–∞–ø—É—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
                process = subprocess.Popen(
                    program_path,
                    shell=True,
                    stdin=subprocess.DEVNULL,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL
                )
                
                return {
                    "success": True,
                    "message": f"‚úÖ **–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞:** {program_name}\n\nüÜî **PID –ø—Ä–æ—Ü–µ—Å—Å–∞:** {process.pid}",
                    "program_name": program_name,
                    "program_path": program_path,
                    "pid": process.pid
                }
            else:
                # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
                subprocess.run(['start', '', program_path], shell=True, check=True)
                
                return {
                    "success": True,
                    "message": f"‚úÖ **–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞:** {program_name}\n\nüìÅ **–ü—É—Ç—å:** {program_path}",
                    "program_name": program_name,
                    "program_path": program_path
                }
                
        except subprocess.CalledProcessError as e:
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:** {str(e)}"
            }
        except Exception as e:
            return {
                "error": True,
                "message": f"‚ùå **–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:** {str(e)}"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_name}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:** {str(e)}"
        }

@tool
async def list_programs(user_id: str = "default_user", state: Annotated[dict, InjectedState] = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        programs = get_installed_programs()
        
        if not programs or (len(programs) == 1 and "–æ—à–∏–±–∫–∞" in programs[0].lower()):
            return {
                "error": True,
                "message": "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º**"
            }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
        popular_programs = [prog for prog in COMMON_PROGRAMS.keys()]
        other_programs = [prog for prog in programs if prog.lower() not in [p.lower() for p in popular_programs]]
        
        message = "üìã **–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã**\n\n"
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if popular_programs:
            message += "‚≠ê **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**\n"
            for prog in popular_programs[:10]:
                message += f"‚Ä¢ {prog}\n"
        
        # –î—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if other_programs:
            message += f"\nüì¶ **–î—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã** (–ø–æ–∫–∞–∑–∞–Ω–æ {min(20, len(other_programs))} –∏–∑ {len(other_programs)}):\n"
            for prog in other_programs[:20]:
                message += f"‚Ä¢ {prog}\n"
        
        message += f"\nüí° **–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:** {len(programs)} –ø—Ä–æ–≥—Ä–∞–º–º"
        
        return {
            "success": True,
            "message": message,
            "programs_count": len(programs),
            "popular_programs": popular_programs,
            "other_programs": other_programs
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º:** {str(e)}"
        }

@tool
async def get_process_list(
    process_name: str = None,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    
    Args:
        process_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        processes = get_process_info(name=process_name)
        
        if not processes or (len(processes) == 1 and "error" in processes[0]):
            error_msg = processes[0].get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if processes else "–ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** {error_msg}"
            }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if process_name:
            message = f"üîç **–ü—Ä–æ—Ü–µ—Å—Å—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{process_name}':**\n\n"
        else:
            message = f"üìä **–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã** (–ø–æ–∫–∞–∑–∞–Ω–æ {len(processes)}):\n\n"
        
        for proc in processes[:25]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            if "error" in proc:
                continue
                
            cpu_percent = proc.get('cpu_percent', 0)
            memory_percent = proc.get('memory_percent', 0)
            memory_rss = proc.get('memory_rss', 'N/A')
            
            message += f"**{proc['name']}** (PID: {proc['pid']})\n"
            message += f"  ‚Ä¢ CPU: {cpu_percent:.1f}% | RAM: {memory_percent:.1f}% ({memory_rss})\n"
            message += f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {proc.get('status', 'Unknown')}\n\n"
        
        if len(processes) > 25:
            message += f"... –∏ –µ—â–µ {len(processes) - 25} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
        
        return {
            "success": True,
            "message": message,
            "processes_count": len(processes),
            "filtered": process_name is not None
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** {str(e)}"
        }

@tool
async def kill_process(
    process_identifier: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID –∏–ª–∏ –∏–º–µ–Ω–∏
    
    Args:
        process_identifier: PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        import psutil
        
        killed_processes = []
        
        # –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ PID
        try:
            pid = int(process_identifier)
            try:
                process = psutil.Process(pid)
                process_name = process.name()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
                critical_processes = ['explorer.exe', 'winlogon.exe', 'csrss.exe', 'smss.exe', 'system']
                if process_name.lower() in critical_processes:
                    return {
                        "error": True,
                        "message": f"‚ùå **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ '{process_name}' –∑–∞–ø—Ä–µ—â–µ–Ω–æ**"
                    }
                
                process.terminate()
                killed_processes.append({"pid": pid, "name": process_name})
                
            except psutil.NoSuchProcess:
                return {
                    "error": True,
                    "message": f"‚ùå **–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω**"
                }
            except psutil.AccessDenied:
                return {
                    "error": True,
                    "message": f"‚ùå **–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID {pid}**"
                }
                
        except ValueError:
            # –≠—Ç–æ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            process_name = process_identifier.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            critical_processes = ['explorer.exe', 'winlogon.exe', 'csrss.exe', 'smss.exe', 'system']
            if any(critical in process_name for critical in critical_processes):
                return {
                    "error": True,
                    "message": f"‚ùå **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ**"
                }
            
            found_processes = []
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if process_name in proc.info['name'].lower():
                        found_processes.append(proc)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            if not found_processes:
                return {
                    "error": True,
                    "message": f"‚ùå **–ü—Ä–æ—Ü–µ—Å—Å—ã —Å –∏–º–µ–Ω–µ–º '{process_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**"
                }
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            for proc in found_processes:
                try:
                    proc.terminate()
                    killed_processes.append({"pid": proc.pid, "name": proc.info['name']})
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        
        if killed_processes:
            message = f"‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** {len(killed_processes)}\n\n"
            for proc in killed_processes:
                message += f"‚Ä¢ {proc['name']} (PID: {proc['pid']})\n"
            
            return {
                "success": True,
                "message": message,
                "killed_processes": killed_processes
            }
        else:
            return {
                "error": True,
                "message": "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞**"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_identifier}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:** {str(e)}"
        }
