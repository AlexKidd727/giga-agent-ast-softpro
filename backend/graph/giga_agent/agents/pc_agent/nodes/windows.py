"""
–£–∑–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∫–Ω–∞–º–∏ Windows –≤ PC Management Agent
"""

import logging
from typing import Annotated

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from ..utils.windows_utils import (
    get_window_list, find_window_by_title, close_window_by_hwnd,
    minimize_window_by_hwnd, maximize_window_by_hwnd, restore_window_by_hwnd,
    get_window_info_by_hwnd, is_program_running
)
from ..config import IS_WINDOWS

logger = logging.getLogger(__name__)

@tool
async def open_windows(user_id: str = "default_user", state: Annotated[dict, InjectedState] = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not IS_WINDOWS:
            return {
                "error": True,
                "message": "‚ùå **–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows**"
            }
        
        windows = get_window_list()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if windows and "error" in windows[0]:
            return {
                "error": True,
                "message": f"‚ùå **{windows[0]['error']}**"
            }
        
        if not windows:
            return {
                "success": True,
                "message": "ü™ü **–û—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**",
                "windows_count": 0
            }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ–∫–Ω–∞
        visible_windows = [w for w in windows if w.get('title') and len(w['title'].strip()) > 0]
        visible_windows.sort(key=lambda x: x.get('title', '').lower())
        
        message = f"ü™ü **–û—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞ ({len(visible_windows)}):**\n\n"
        
        for i, window in enumerate(visible_windows[:20], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            title = window['title']
            if len(title) > 60:
                title = title[:57] + "..."
            
            process_name = window.get('process_name', 'Unknown')
            hwnd = window.get('hwnd', 0)
            
            # –°—Ç–∞—Ç—É—Å –æ–∫–Ω–∞
            status_icons = []
            if window.get('is_minimized'):
                status_icons.append("üìâ")
            elif window.get('is_maximized'):
                status_icons.append("üìà")
            else:
                status_icons.append("ü™ü")
            
            status = " ".join(status_icons)
            
            message += f"{status} **{title}**\n"
            message += f"  üì± {process_name} | üÜî {hwnd}\n"
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            rect = window.get('rect', {})
            if rect:
                width = rect.get('width', 0)
                height = rect.get('height', 0)
                message += f"  üìê {width}√ó{height}\n"
            
            message += "\n"
        
        if len(visible_windows) > 20:
            message += f"... –∏ –µ—â–µ {len(visible_windows) - 20} –æ–∫–æ–Ω"
        
        message += "\nüí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HWND –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –æ–∫–Ω–æ–º**"
        
        return {
            "success": True,
            "message": message,
            "windows_count": len(visible_windows),
            "windows": visible_windows[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∫–æ–Ω: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∫–æ–Ω:** {str(e)}"
        }

@tool
async def close_window(
    window_identifier: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø–æ HWND –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫—É
    
    Args:
        window_identifier: HWND –æ–∫–Ω–∞ –∏–ª–∏ —á–∞—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not IS_WINDOWS:
            return {
                "error": True,
                "message": "‚ùå **–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows**"
            }
        
        # –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ HWND
        try:
            hwnd = int(window_identifier)
            result = close_window_by_hwnd(hwnd)
            
            if result.get('success'):
                return {
                    "success": True,
                    "message": f"‚úÖ **{result['message']}**",
                    "hwnd": hwnd
                }
            else:
                return {
                    "error": True,
                    "message": f"‚ùå **{result['error']}**"
                }
                
        except ValueError:
            # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            windows = find_window_by_title(window_identifier)
            
            if not windows or "error" in windows[0]:
                return {
                    "error": True,
                    "message": f"‚ùå **–û–∫–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{window_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**"
                }
            
            closed_windows = []
            for window in windows[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º—ã—Ö –æ–∫–æ–Ω
                hwnd = window.get('hwnd')
                if hwnd:
                    result = close_window_by_hwnd(hwnd)
                    if result.get('success'):
                        closed_windows.append(window['title'])
            
            if closed_windows:
                message = f"‚úÖ **–ó–∞–∫—Ä—ã—Ç–æ –æ–∫–æ–Ω:** {len(closed_windows)}\n\n"
                for title in closed_windows:
                    message += f"‚Ä¢ {title}\n"
                
                return {
                    "success": True,
                    "message": message,
                    "closed_count": len(closed_windows)
                }
            else:
                return {
                    "error": True,
                    "message": f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{window_identifier}'**"
                }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ {window_identifier}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞:** {str(e)}"
        }

@tool
async def get_window_info(
    hwnd: int,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫–Ω–µ
    
    Args:
        hwnd: HWND –æ–∫–Ω–∞
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not IS_WINDOWS:
            return {
                "error": True,
                "message": "‚ùå **–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows**"
            }
        
        window_info = get_window_info_by_hwnd(hwnd)
        
        if "error" in window_info:
            return {
                "error": True,
                "message": f"‚ùå **{window_info['error']}**"
            }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        title = window_info.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        rect = window_info.get('rect', {})
        process = window_info.get('process', {})
        
        message = f"""ü™ü **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–Ω–µ**

üìõ **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {title}
üÜî **HWND:** {hwnd}
üî¢ **PID:** {window_info.get('pid', 'N/A')}

üì± **–ü—Ä–æ—Ü–µ—Å—Å:**
‚Ä¢ –ò–º—è: {process.get('name', 'Unknown')}
‚Ä¢ CPU: {process.get('cpu_percent', 0):.1f}%
‚Ä¢ RAM: {process.get('memory_percent', 0):.1f}%
‚Ä¢ –°—Ç–∞—Ç—É—Å: {process.get('status', 'Unknown')}

üìê **–†–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—è:**
‚Ä¢ X: {rect.get('left', 0)}, Y: {rect.get('top', 0)}
‚Ä¢ –®–∏—Ä–∏–Ω–∞: {rect.get('width', 0)}
‚Ä¢ –í—ã—Å–æ—Ç–∞: {rect.get('height', 0)}

üéõÔ∏è **–°–æ—Å—Ç–æ—è–Ω–∏–µ:**
‚Ä¢ –í–∏–¥–∏–º–æ: {'‚úÖ' if window_info.get('is_visible') else '‚ùå'}
‚Ä¢ –°–≤–µ—Ä–Ω—É—Ç–æ: {'‚úÖ' if window_info.get('is_minimized') else '‚ùå'}
‚Ä¢ –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ: {'‚úÖ' if window_info.get('is_maximized') else '‚ùå'}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ: {'‚úÖ' if window_info.get('is_enabled') else '‚ùå'}"""
        
        return {
            "success": True,
            "message": message,
            "window_info": window_info
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫–Ω–µ {hwnd}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫–Ω–µ:** {str(e)}"
        }

@tool
async def minimize_window(
    window_identifier: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ HWND –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫—É
    
    Args:
        window_identifier: HWND –æ–∫–Ω–∞ –∏–ª–∏ —á–∞—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not IS_WINDOWS:
            return {
                "error": True,
                "message": "‚ùå **–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows**"
            }
        
        # –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ HWND
        try:
            hwnd = int(window_identifier)
            result = minimize_window_by_hwnd(hwnd)
            
            if result.get('success'):
                return {
                    "success": True,
                    "message": f"‚úÖ **{result['message']}**",
                    "hwnd": hwnd
                }
            else:
                return {
                    "error": True,
                    "message": f"‚ùå **{result['error']}**"
                }
                
        except ValueError:
            # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            windows = find_window_by_title(window_identifier)
            
            if not windows or "error" in windows[0]:
                return {
                    "error": True,
                    "message": f"‚ùå **–û–∫–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{window_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**"
                }
            
            minimized_windows = []
            for window in windows[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                hwnd = window.get('hwnd')
                if hwnd:
                    result = minimize_window_by_hwnd(hwnd)
                    if result.get('success'):
                        minimized_windows.append(window['title'])
            
            if minimized_windows:
                message = f"‚úÖ **–°–≤–µ—Ä–Ω—É—Ç–æ –æ–∫–æ–Ω:** {len(minimized_windows)}\n\n"
                for title in minimized_windows:
                    message += f"‚Ä¢ {title}\n"
                
                return {
                    "success": True,
                    "message": message,
                    "minimized_count": len(minimized_windows)
                }
            else:
                return {
                    "error": True,
                    "message": f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{window_identifier}'**"
                }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞ {window_identifier}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞:** {str(e)}"
        }

@tool
async def maximize_window(
    window_identifier: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ HWND –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫—É
    
    Args:
        window_identifier: HWND –æ–∫–Ω–∞ –∏–ª–∏ —á–∞—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not IS_WINDOWS:
            return {
                "error": True,
                "message": "‚ùå **–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows**"
            }
        
        # –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ HWND
        try:
            hwnd = int(window_identifier)
            result = maximize_window_by_hwnd(hwnd)
            
            if result.get('success'):
                return {
                    "success": True,
                    "message": f"‚úÖ **{result['message']}**",
                    "hwnd": hwnd
                }
            else:
                return {
                    "error": True,
                    "message": f"‚ùå **{result['error']}**"
                }
                
        except ValueError:
            # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            windows = find_window_by_title(window_identifier)
            
            if not windows or "error" in windows[0]:
                return {
                    "error": True,
                    "message": f"‚ùå **–û–∫–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{window_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**"
                }
            
            maximized_windows = []
            for window in windows[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                hwnd = window.get('hwnd')
                if hwnd:
                    result = maximize_window_by_hwnd(hwnd)
                    if result.get('success'):
                        maximized_windows.append(window['title'])
            
            if maximized_windows:
                message = f"‚úÖ **–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –æ–∫–æ–Ω:** {len(maximized_windows)}\n\n"
                for title in maximized_windows:
                    message += f"‚Ä¢ {title}\n"
                
                return {
                    "success": True,
                    "message": message,
                    "maximized_count": len(maximized_windows)
                }
            else:
                return {
                    "error": True,
                    "message": f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{window_identifier}'**"
                }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞ {window_identifier}: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞:** {str(e)}"
        }
