"""
–ì—Ä–∞—Ñ Google Calendar Agent (Service Account)
"""

import logging
from typing import Annotated, TypedDict
from datetime import datetime

from langchain_core.tools import tool
from langchain_core.messages import HumanMessage, ToolMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langgraph.prebuilt import InjectedState
from langgraph.constants import START, END
from langgraph.graph import StateGraph
from langgraph.graph.ui import push_ui_message

from giga_agent.agents.calendar_agent.nodes.simple_events import (
    simple_create_event, simple_list_events, simple_get_available_slots, 
    simple_delete_event, simple_calendar_status
)

logger = logging.getLogger(__name__)

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è (Service Account)
CALENDAR_TOOLS = [
    simple_create_event,
    simple_list_events,
    simple_get_available_slots,
    simple_delete_event,
    simple_calendar_status,
]

@tool
async def calendar_agent(
    user_request: str,
    user_id: str = "default_user",
    state: Annotated[dict, InjectedState] = None
):
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Calendar —á–µ—Ä–µ–∑ Service Account
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º:
    - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    - –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    
    Args:
        user_request: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è", "—Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    
    try:
        user_input = user_request.lower()
        
        # –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        if any(phrase in user_input for phrase in ["–ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è", "–º–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞", "—á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", "—Å–æ–±—ã—Ç–∏—è –Ω–∞", "–º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥", "–Ω–∞ –º–µ—Å—è—Ü"]):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞
            days_ahead = 30  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü
            if "–Ω–µ–¥–µ–ª—è" in user_input or "–Ω–µ–¥–µ–ª—é" in user_input:
                days_ahead = 7
            elif "–¥–µ–Ω—å" in user_input or "–¥–Ω—è" in user_input:
                days_ahead = 1
            elif "–º–µ—Å—è—Ü" in user_input or "–º–µ—Å—è—Ü–∞" in user_input:
                days_ahead = 30
            
            result = await simple_list_events.ainvoke({"days_ahead": days_ahead})
            return result
            
        elif any(phrase in user_input for phrase in ["—Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "—Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É", "–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "—Å–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ", "–¥–æ–±–∞–≤—å —Å–æ–±—ã—Ç–∏–µ", "–¥–æ–±–∞–≤—å –≤—Å—Ç—Ä–µ—á—É"]):
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            from datetime import datetime, timedelta
            import re
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            title = "–°–æ–±—ã—Ç–∏–µ"
            if '"' in user_request:
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                title_match = re.search(r'"([^"]*)"', user_request)
                if title_match:
                    title = title_match.group(1)
            elif "–Ω–∞–∑–≤–∞–Ω–∏–µ–º" in user_input:
                # –ò—â–µ–º –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "–Ω–∞–∑–≤–∞–Ω–∏–µ–º"
                title_match = re.search(r'–Ω–∞–∑–≤–∞–Ω–∏–µ–º\s+"([^"]*)"', user_input)
                if title_match:
                    title = title_match.group(1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            start_datetime = None
            end_datetime = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º "—Å–µ–≥–æ–¥–Ω—è"
            if "—Å–µ–≥–æ–¥–Ω—è" in user_input:
                today = datetime.now()
                date_str = today.strftime("%d.%m.%Y")
                
                # –ò—â–µ–º –≤—Ä–µ–º—è
                time_match = re.search(r'(\d{1,2}):(\d{2})', user_input)
                if time_match:
                    hour = int(time_match.group(1))
                    minute = int(time_match.group(2))
                    start_datetime = f"{date_str} {hour:02d}:{minute:02d}"
                    
                    # –ö–æ–Ω–µ—Ü —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —á–∞—Å
                    end_hour = hour + 1
                    if end_hour >= 24:
                        end_hour = 0
                        end_date = today + timedelta(days=1)
                        end_date_str = end_date.strftime("%d.%m.%Y")
                    else:
                        end_date_str = date_str
                    end_datetime = f"{end_date_str} {end_hour:02d}:{minute:02d}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º "–∑–∞–≤—Ç—Ä–∞"
            elif "–∑–∞–≤—Ç—Ä–∞" in user_input:
                tomorrow = datetime.now() + timedelta(days=1)
                date_str = tomorrow.strftime("%d.%m.%Y")
                
                # –ò—â–µ–º –≤—Ä–µ–º—è
                time_match = re.search(r'(\d{1,2}):(\d{2})', user_input)
                if time_match:
                    hour = int(time_match.group(1))
                    minute = int(time_match.group(2))
                    start_datetime = f"{date_str} {hour:02d}:{minute:02d}"
                    
                    # –ö–æ–Ω–µ—Ü —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —á–∞—Å
                    end_hour = hour + 1
                    if end_hour >= 24:
                        end_hour = 0
                        end_date = tomorrow + timedelta(days=1)
                        end_date_str = end_date.strftime("%d.%m.%Y")
                    else:
                        end_date_str = date_str
                    end_datetime = f"{end_date_str} {end_hour:02d}:{minute:02d}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
            date_match = re.search(r'(\d{1,2})\.(\d{1,2})\.(\d{4})', user_input)
            if date_match and not start_datetime:
                day = int(date_match.group(1))
                month = int(date_match.group(2))
                year = int(date_match.group(3))
                date_str = f"{day:02d}.{month:02d}.{year}"
                
                # –ò—â–µ–º –≤—Ä–µ–º—è
                time_match = re.search(r'(\d{1,2}):(\d{2})', user_input)
                if time_match:
                    hour = int(time_match.group(1))
                    minute = int(time_match.group(2))
                    start_datetime = f"{date_str} {hour:02d}:{minute:02d}"
                    
                    # –ö–æ–Ω–µ—Ü —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —á–∞—Å
                    end_hour = hour + 1
                    if end_hour >= 24:
                        end_hour = 0
                        from datetime import date
                        event_date = date(year, month, day)
                        end_date = event_date + timedelta(days=1)
                        end_date_str = end_date.strftime("%d.%m.%Y")
                    else:
                        end_date_str = date_str
                    end_datetime = f"{end_date_str} {end_hour:02d}:{minute:02d}"
            
            # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            if start_datetime and end_datetime:
                try:
                    result = await simple_create_event.ainvoke({
                        "title": title,
                        "start_datetime": start_datetime,
                        "end_datetime": end_datetime,
                        "description": f"–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ GigaChat Agent",
                        "user_id": user_id
                    })
                    return result
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
                    return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {str(e)}"
            else:
                return """üìã **–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç simple_create_event —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
‚Ä¢ title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ start_datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º"
‚Ä¢ end_datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º"
‚Ä¢ description: –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
‚Ä¢ user_id: –í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ü—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É "–°–æ–≤–µ—â–∞–Ω–∏–µ" –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 15:00-16:00"""
            
        elif any(phrase in user_input for phrase in ["—Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã", "–¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è", "–∫–æ–≥–¥–∞ —Å–≤–æ–±–æ–¥–µ–Ω", "—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è"]):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            date = None
            for word in user_input.split():
                if len(word) == 10 and word.count('-') == 2:  # —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
                    date = word
                    break
                elif len(word) == 10 and word.count('.') == 2:  # —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
                    try:
                        from datetime import datetime
                        date_obj = datetime.strptime(word, "%d.%m.%Y")
                        date = date_obj.strftime("%Y-%m-%d")
                        break
                    except:
                        pass
            
            if not date:
                return "‚ùå **–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É**\n\n–ü—Ä–∏–º–µ—Ä: '–ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ 2025-01-20' –∏–ª–∏ '—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ 20.01.2025'"
            
            result = await simple_get_available_slots.ainvoke({"date": date})
            return result
            
        elif any(phrase in user_input for phrase in ["—Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "–ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "–∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω"]):
            result = await simple_calendar_status.ainvoke({})
            return result
            
        elif any(phrase in user_input for phrase in ["—É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "—É–¥–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µ", "–æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"]):
            return """üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**

–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç simple_delete_event —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
‚Ä¢ event_id: ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
‚Ä¢ user_id: –í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID –Ω—É–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
            
        else:
            return """üìÖ **Google Calendar Agent (Service Account)**

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ "–ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
‚Ä¢ "–ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –º–µ—Å—è—Ü" - —Å–æ–±—ã—Ç–∏—è –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
‚Ä¢ "–ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é" - —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
‚Ä¢ "—Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ" - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
‚Ä¢ "—Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ [–¥–∞—Ç–∞]" - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ "—Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è" - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ø–æ–∫–∞–∂–∏ —á—Ç–æ —É –º–µ–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥"
‚Ä¢ "—Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ 20.01.2025"
‚Ä¢ "—Å–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00" """
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ calendar_agent: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
CALENDAR_PROMPT = ChatPromptTemplate.from_messages([
    ("system", """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å Google Calendar —á–µ—Ä–µ–∑ Service Account.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º:
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
- –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (simple_*), —Ç–∞–∫ –∫–∞–∫ OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º."""),
    MessagesPlaceholder("messages"),
])

# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
def create_calendar_graph():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ calendar_agent"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    class CalendarAgentState(TypedDict):
        messages: Annotated[list, "–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"]
        user_request: str
        user_id: str
        current_step: str
        error: str

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
    workflow = StateGraph(CalendarAgentState)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
    workflow.add_node("calendar_agent", calendar_agent)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–∞
    workflow.add_edge(START, "calendar_agent")
    workflow.add_edge("calendar_agent", END)
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ
    return workflow.compile()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥—Ä–∞—Ñ–∞
graph = create_calendar_graph()