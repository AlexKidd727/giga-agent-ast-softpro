"""
–ú–µ–Ω–µ–¥–∂–µ—Ä OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Google Calendar
"""

import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
import httpx

from ..config import (
    GOOGLE_CLIENT_ID,
    GOOGLE_CLIENT_SECRET,
    GOOGLE_SCOPES,
    GOOGLE_OAUTH_DEVICE_ENDPOINT,
    GOOGLE_OAUTH_TOKEN_ENDPOINT
)
from .storage import storage

logger = logging.getLogger(__name__)

class OAuthManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Google Calendar"""
    
    def __init__(self):
        self.client_id = GOOGLE_CLIENT_ID
        self.client_secret = GOOGLE_CLIENT_SECRET
        self.scopes = " ".join(GOOGLE_SCOPES)
    
    async def start_device_flow(self, user_id: str) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è Device Flow –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.client_id:
            return {
                "error": "Google Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                "details": "–î–æ–±–∞–≤—å—Ç–µ GOOGLE_CLIENT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            }
        
        try:
            data = {
                'client_id': self.client_id,
                'scope': self.scopes
            }
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(GOOGLE_OAUTH_DEVICE_ENDPOINT, data=data)
                
                if response.status_code != 200:
                    error_text = response.text
                    logger.error(f"–û—à–∏–±–∫–∞ Device Flow: {response.status_code} {error_text}")
                    return {
                        "error": f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}",
                        "details": error_text
                    }
                
                device_data = response.json()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Device Flow
                storage.save_device_code(user_id, device_data)
                
                return {
                    "success": True,
                    "user_code": device_data.get('user_code'),
                    "verification_url": device_data.get('verification_url', device_data.get('verification_uri')),
                    "expires_in": device_data.get('expires_in', 1800),
                    "interval": device_data.get('interval', 5)
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Device Flow: {e}")
            return {
                "error": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google",
                "details": str(e)
            }
    
    async def poll_device_token(self, user_id: str) -> Dict[str, Any]:
        """–û–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –≤ —Ä–∞–º–∫–∞—Ö Device Flow"""
        device_data = storage.get_device_code(user_id)
        
        if not device_data:
            return {
                "error": "Device Flow –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω",
                "details": "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ start_device_flow"
            }
        
        device_code = device_data.get('device_code')
        if not device_code:
            return {
                "error": "Device code –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "details": "–î–∞–Ω–Ω—ã–µ Device Flow –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã"
            }
        
        try:
            data = {
                'client_id': self.client_id,
                'client_secret': self.client_secret,
                'device_code': device_code,
                'grant_type': 'urn:ietf:params:oauth:grant-type:device_code'
            }
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(GOOGLE_OAUTH_TOKEN_ENDPOINT, data=data)
                response_data = response.json()
                
                if response.status_code != 200:
                    error = response_data.get('error', 'unknown_error')
                    
                    if error in ['authorization_pending', 'slow_down']:
                        return {
                            "pending": True,
                            "message": "‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Google –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å"
                        }
                    
                    return {
                        "error": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error}",
                        "details": response_data.get('error_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    }
                
                # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
                storage.save_user_tokens(user_id, response_data)
                storage.clear_device_code(user_id)
                
                return {
                    "success": True,
                    "message": "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
            return {
                "error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
                "details": str(e)
            }
    
    async def refresh_access_token(self, user_id: str) -> Optional[str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞"""
        tokens = storage.get_user_tokens(user_id)
        
        if not tokens or 'refresh_token' not in tokens:
            logger.warning(f"–ù–µ—Ç refresh_token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
        
        try:
            data = {
                'client_id': self.client_id,
                'client_secret': self.client_secret,
                'refresh_token': tokens['refresh_token'],
                'grant_type': 'refresh_token'
            }
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(GOOGLE_OAUTH_TOKEN_ENDPOINT, data=data)
                
                if response.status_code != 200:
                    error_text = response.text
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} {error_text}")
                    return None
                
                token_data = response.json()
                
                if 'error' in token_data:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {token_data}")
                    return None
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
                updated_tokens = tokens.copy()
                updated_tokens['access_token'] = token_data['access_token']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º refresh_token –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                if 'refresh_token' in token_data:
                    updated_tokens['refresh_token'] = token_data['refresh_token']
                
                storage.save_user_tokens(user_id, updated_tokens)
                
                logger.info(f"üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return token_data['access_token']
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    async def get_valid_access_token(self, user_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞"""
        if not storage.is_token_valid(user_id):
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
            return await self.refresh_access_token(user_id)
        
        tokens = storage.get_user_tokens(user_id)
        return tokens.get('access_token') if tokens else None
    
    def is_authenticated(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return storage.is_token_valid(user_id)
    
    def revoke_access(self, user_id: str):
        """–û—Ç–∑—ã–≤ –¥–æ—Å—Ç—É–ø–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤)"""
        storage.delete_user_data(user_id)
        logger.info(f"üîê –î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ OAuth
oauth_manager = OAuthManager()
