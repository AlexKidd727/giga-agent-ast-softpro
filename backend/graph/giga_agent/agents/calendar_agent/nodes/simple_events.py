"""
–£–∑–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Google Calendar
"""

import logging
from datetime import datetime, timedelta
from typing import Annotated, Optional

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from ..utils.simple_auth import simple_calendar_auth

logger = logging.getLogger(__name__)

@tool
async def simple_create_event(
    title: str,
    start_datetime: str,
    end_datetime: str,
    description: str = "",
    user_name: str = "",
    user_username: str = "",
    state: Annotated[dict, InjectedState] = None
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    
    Args:
        title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        start_datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "20.01.2025 15:00")
        end_datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "20.01.2025 16:00")
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        user_username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        if not simple_calendar_auth.is_authenticated():
            return {
                "error": True,
                "message": "‚ùå **Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å service account –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"
            }
        
        result = simple_calendar_auth.create_event(
            title=title,
            start_datetime=start_datetime,
            end_datetime=end_datetime,
            description=description,
            user_name=user_name,
            user_username=user_username
        )
        
        if result.get("error"):
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:**\n{result['message']}"
            }
        
        return {
            "success": True,
            "message": f"""‚úÖ **–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!**

üìã **{title}**
‚è∞ {start_datetime} - {end_datetime}"""
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:** {str(e)}"
        }

@tool
async def simple_list_events(
    max_results: int = 10,
    days_ahead: int = 7,
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar
    
    Args:
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        days_ahead: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
    """
    try:
        if not simple_calendar_auth.is_authenticated():
            return {
                "error": True,
                "message": "‚ùå **Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å service account –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"
            }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
        now = datetime.now()
        time_min = now.isoformat() + 'Z'  # –î–æ–±–∞–≤–ª—è–µ–º Z –¥–ª—è UTC
        time_max = (now + timedelta(days=days_ahead)).isoformat() + 'Z'
        
        result = simple_calendar_auth.list_events(
            max_results=max_results,
            time_min=time_min
        )
        
        if result.get("error"):
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:**\n{result['message']}"
            }
        
        events = result.get("events", [])
        if not events:
            return {
                "success": True,
                "message": "üìÖ **–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç."
            }
        
        message = f"üìÖ **–°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ({len(events)}):**\n\n"
        
        for i, event in enumerate(events, 1):
            message += f"{i}. **{event['title']}**\n"
            message += f"   ‚è∞ {event['time']}\n"
            if event.get('description'):
                desc = event['description'][:100]
                if len(event['description']) > 100:
                    desc += "..."
                message += f"   üìù {desc}\n"
            message += "\n"
        
        return {
            "success": True,
            "message": message,
            "events_count": len(events)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:** {str(e)}"
        }

@tool
async def simple_get_available_slots(
    date: str,
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    
    Args:
        date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–≥–≥–≥–≥-–º–º-–¥–¥" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-01-20")
    """
    try:
        if not simple_calendar_auth.is_authenticated():
            return {
                "error": True,
                "message": "‚ùå **Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å service account –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"
            }
        
        available_slots = simple_calendar_auth.get_available_time_slots(date)
        
        if not available_slots:
            return {
                "success": True,
                "message": f"üìÖ **–ù–∞ {date} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤**\n\n–í—Å–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º."
            }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            date_obj = datetime.strptime(date, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
        except:
            formatted_date = date
        
        message = f"üìÖ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {formatted_date}:**\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for i in range(0, len(available_slots), 4):
            row_slots = available_slots[i:i+4]
            message += " ".join([f"`{slot}`" for slot in row_slots]) + "\n"
        
        message += f"\n‚úÖ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(available_slots)} —Å–ª–æ—Ç–æ–≤"
        
        return {
            "success": True,
            "message": message,
            "available_slots": available_slots,
            "slots_count": len(available_slots)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:** {str(e)}"
        }

@tool
async def simple_delete_event(
    event_id: str,
    state: Annotated[dict, InjectedState] = None
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar
    
    Args:
        event_id: ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    try:
        if not simple_calendar_auth.is_authenticated():
            return {
                "error": True,
                "message": "‚ùå **Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å service account –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"
            }
        
        result = simple_calendar_auth.delete_event(event_id)
        
        if result.get("error"):
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:**\n{result['message']}"
            }
        
        return {
            "success": True,
            "message": f"""‚úÖ **–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ**

üóëÔ∏è –°–æ–±—ã—Ç–∏–µ —Å ID `{event_id}` —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:** {str(e)}"
        }

@tool
async def simple_calendar_status(
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar
    """
    try:
        is_authenticated = simple_calendar_auth.is_authenticated()
        
        if is_authenticated:
            message = """‚úÖ **Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω**

üîß **–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ (Service Account)
- –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ù–∞—Å—Ç—Ä–æ–µ–Ω
- –î–æ—Å—Ç—É–ø: –ü–æ–ª–Ω—ã–π

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
- "—Å–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ" - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
- "–ø–æ–∫–∞–∂–∏ —Å–æ–±—ã—Ç–∏—è" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π  
- "–ø–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã" - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
- "—É–¥–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µ" - —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ ID"""
        else:
            message = """‚ùå **Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**

üîß **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:**
1. –°–æ–∑–¥–∞—Ç—å Service Account –≤ Google Cloud Console
2. –°–∫–∞—á–∞—Ç—å JSON —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
   - GOOGLE_CALENDAR_CREDENTIALS=–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É.json
   - CALENDAR_ID=id_–∫–∞–ª–µ–Ω–¥–∞—Ä—è

üí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
- –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
- –£–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏"""
        
        return {
            "authenticated": is_authenticated,
            "message": message
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:** {str(e)}"
        }
