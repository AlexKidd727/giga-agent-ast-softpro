"""
–£–∑–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ Google Calendar
"""

import logging
from datetime import datetime, timedelta
from typing import Annotated, Optional

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from ..utils.google_api import calendar_client
from ..utils.oauth_manager import oauth_manager

logger = logging.getLogger(__name__)

@tool
async def create_event(
    user_id: str,
    title: str,
    start_datetime: str,
    end_datetime: str,
    description: str = "",
    all_day: bool = False,
    state: Annotated[dict, InjectedState] = None
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        start_datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-01-15T10:00:00)
        end_datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-01-15T11:00:00)
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        all_day: –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not oauth_manager.is_authenticated(user_id):
            return {
                "error": True,
                "message": "‚ùå **–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω Google Calendar**\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–∞–Ω–¥–æ–π: \"–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å\""
            }
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        result = await calendar_client.create_event(
            user_id=user_id,
            title=title,
            description=description,
            start_datetime=start_datetime,
            end_datetime=end_datetime,
            all_day=all_day
        )
        
        if 'error' in result:
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:**\n{result['error']}\n\nüìù {result.get('details', '')}"
            }
        
        event_id = result.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        event_link = result.get('htmlLink', '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            start_dt = datetime.fromisoformat(start_datetime.replace('Z', '+00:00'))
            end_dt = datetime.fromisoformat(end_datetime.replace('Z', '+00:00'))
            
            if all_day:
                time_info = f"üìÖ {start_dt.strftime('%d.%m.%Y')}"
            else:
                time_info = f"‚è∞ {start_dt.strftime('%d.%m.%Y %H:%M')} - {end_dt.strftime('%H:%M')}"
        except:
            time_info = f"‚è∞ {start_datetime} - {end_datetime}"
        
        message = f"""‚úÖ **–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!**

üìã **{title}**
{time_info}"""
        
        if description:
            message += f"\nüìù {description}"
        
        if event_link:
            message += f"\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Google Calendar]({event_link})"
        
        message += f"\n\nüÜî ID —Å–æ–±—ã—Ç–∏—è: `{event_id}`"
        
        return {
            "success": True,
            "message": message,
            "event_id": event_id,
            "event_link": event_link
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:** {str(e)}"
        }

@tool
async def list_events(
    user_id: str,
    max_results: int = 10,
    time_min: Optional[str] = None,
    time_max: Optional[str] = None,
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        time_min: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–π—á–∞—Å)
        time_max: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not oauth_manager.is_authenticated(user_id):
            return {
                "error": True,
                "message": "‚ùå **–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω Google Calendar**\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–∞–Ω–¥–æ–π: \"–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å\""
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        result = await calendar_client.list_events(
            user_id=user_id,
            max_results=max_results,
            time_min=time_min,
            time_max=time_max
        )
        
        if 'error' in result:
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:**\n{result['error']}\n\nüìù {result.get('details', '')}"
            }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
        formatted_events = calendar_client.format_events_list(result)
        
        return {
            "success": True,
            "message": formatted_events,
            "events_count": len(result.get('items', []))
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:** {str(e)}"
        }

@tool
async def update_event(
    user_id: str,
    event_id: str,
    title: Optional[str] = None,
    description: Optional[str] = None,
    start_datetime: Optional[str] = None,
    end_datetime: Optional[str] = None,
    state: Annotated[dict, InjectedState] = None
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        event_id: ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        title: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        description: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        start_datetime: –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        end_datetime: –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not oauth_manager.is_authenticated(user_id):
            return {
                "error": True,
                "message": "‚ùå **–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω Google Calendar**\n\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–∞–Ω–¥–æ–π: \"–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å\""
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        result = await calendar_client.update_event(
            user_id=user_id,
            event_id=event_id,
            title=title,
            description=description,
            start_datetime=start_datetime,
            end_datetime=end_datetime
        )
        
        if 'error' in result:
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:**\n{result['error']}\n\nüìù {result.get('details', '')}"
            }
        
        event_title = result.get('summary', '–°–æ–±—ã—Ç–∏–µ')
        event_link = result.get('htmlLink', '')
        
        message = f"""‚úÖ **–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**

üìã **{event_title}**"""
        
        if title:
            message += f"\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ"
        if description is not None:
            message += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        if start_datetime or end_datetime:
            message += f"\n‚è∞ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ"
        
        if event_link:
            message += f"\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Google Calendar]({event_link})"
        
        return {
            "success": True,
            "message": message,
            "event_id": event_id
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:** {str(e)}"
        }

@tool
async def delete_event(
    user_id: str,
    event_id: str,
    state: Annotated[dict, InjectedState] = None
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        event_id: ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not oauth_manager.is_authenticated(user_id):
            return {
                "error": True,
                "message": "‚ùå **–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω Google Calendar**\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–∞–Ω–¥–æ–π: \"–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å\""
            }
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        event_info = await calendar_client.get_event(user_id, event_id)
        event_title = event_info.get('summary', '–°–æ–±—ã—Ç–∏–µ') if 'error' not in event_info else '–°–æ–±—ã—Ç–∏–µ'
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        result = await calendar_client.delete_event(user_id, event_id)
        
        if 'error' in result:
            return {
                "error": True,
                "message": f"‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:**\n{result['error']}\n\nüìù {result.get('details', '')}"
            }
        
        return {
            "success": True,
            "message": f"""‚úÖ **–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ**

üóëÔ∏è **{event_title}** —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

üìã ID —Å–æ–±—ã—Ç–∏—è: `{event_id}`"""
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:** {str(e)}"
        }

@tool
async def get_event_details(
    user_id: str,
    event_id: str,
    state: Annotated[dict, InjectedState] = None
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        event_id: ID —Å–æ–±—ã—Ç–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not oauth_manager.is_authenticated(user_id):
            return {
                "error": True,
                "message": "‚ùå **–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω Google Calendar**\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–∞–Ω–¥–æ–π: \"–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å\""
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        result = await calendar_client.get_event(user_id, event_id)
        
        if 'error' in result:
            return {
                "error": True,
                "message": f"‚ùå **–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:**\n{result['error']}\n\nüìù {result.get('details', '')}"
            }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        title = result.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = result.get('description', '')
        location = result.get('location', '')
        
        start = result.get('start', {})
        end = result.get('end', {})
        start_time = calendar_client.format_event_time(start)
        end_time = calendar_client.format_event_time(end)
        
        created = result.get('created', '')
        updated = result.get('updated', '')
        event_link = result.get('htmlLink', '')
        
        message = f"""üìã **–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è**

**{title}**
‚è∞ {start_time} - {end_time}"""
        
        if description:
            message += f"\nüìù {description}"
        
        if location:
            message += f"\nüìç {location}"
        
        if created:
            try:
                created_dt = datetime.fromisoformat(created.replace('Z', '+00:00'))
                message += f"\nüìÖ –°–æ–∑–¥–∞–Ω–æ: {created_dt.strftime('%d.%m.%Y %H:%M')}"
            except:
                pass
        
        if event_link:
            message += f"\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Google Calendar]({event_link})"
        
        message += f"\n\nüÜî ID: `{event_id}`"
        
        return {
            "success": True,
            "message": message,
            "event_data": result
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "error": True,
            "message": f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:** {str(e)}"
        }
