"""
–ö–∞—Å—Ç–æ–º–Ω—ã–π GigaChat —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ JSON –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
"""
import json
import os
import logging
from typing import Any, Dict, List, Optional, Union
from langchain_gigachat import GigaChat
from langchain_core.messages import BaseMessage
from langchain_core.outputs import LLMResult
from langchain_core.callbacks import CallbackManagerForLLMRun
from giga_agent.utils.gigachat_modes import get_gigachat_mode_manager
import httpx
from unittest.mock import patch

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class CustomGigaChat(GigaChat):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π GigaChat —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ JSON –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ü–∞—Ç—á–∏–º HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        self._patch_http_client()
    
    def _patch_http_client(self):
        """–ü–∞—Ç—á–∏—Ç HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GigaChat API"""
        original_post = httpx.Client.post
        original_async_post = httpx.AsyncClient.post
        
        def patched_post(self, url, *args, **kwargs):
            if "gigachat.devices.sberbank.ru" in str(url) or "api.giga.chat" in str(url):
                logger.info("üîç CUSTOM GIGACHAT: –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω HTTP POST –∑–∞–ø—Ä–æ—Å")
                if 'json' in kwargs:
                    logger.info(f"üì• –ò—Å—Ö–æ–¥–Ω—ã–π JSON: {json.dumps(kwargs['json'], ensure_ascii=False, indent=2)}")
                    kwargs['json'] = self._modify_request_data(kwargs['json'])
                    logger.info(f"üì§ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON: {json.dumps(kwargs['json'], ensure_ascii=False, indent=2)}")
            return original_post(self, url, *args, **kwargs)
        
        async def patched_async_post(self, url, *args, **kwargs):
            if "gigachat.devices.sberbank.ru" in str(url) or "api.giga.chat" in str(url):
                logger.info("üîç CUSTOM GIGACHAT: –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω async HTTP POST –∑–∞–ø—Ä–æ—Å")
                if 'json' in kwargs:
                    logger.info(f"üì• –ò—Å—Ö–æ–¥–Ω—ã–π JSON: {json.dumps(kwargs['json'], ensure_ascii=False, indent=2)}")
                    kwargs['json'] = self._modify_request_data(kwargs['json'])
                    logger.info(f"üì§ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON: {json.dumps(kwargs['json'], ensure_ascii=False, indent=2)}")
            return await original_async_post(self, url, *args, **kwargs)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏
        httpx.Client.post = patched_post
        httpx.AsyncClient.post = patched_async_post
    
    def _modify_request_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫ API
        
        Args:
            data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        """
        logger.info("üöÄ CUSTOM GIGACHAT: –ù–∞—á–∞–ª–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º–æ–≤
        mode_manager = get_gigachat_mode_manager()
        logger.info(f"üéØ CUSTOM GIGACHAT: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode_manager.get_mode().value}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        modified_data = mode_manager.modify_request_data(data)
        
        logger.info("‚úÖ CUSTOM GIGACHAT: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return modified_data
    
    def _call(
        self,
        messages: List[BaseMessage],
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º _call –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥, –Ω–æ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        return super()._call(messages, stop, run_manager, **kwargs)
    
    async def _acall(
        self,
        messages: List[BaseMessage],
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º _acall –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥, –Ω–æ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        return await super()._acall(messages, stop, run_manager, **kwargs)
    
    def _generate(
        self,
        messages: List[BaseMessage],
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> LLMResult:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º _generate –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
        return super()._generate(messages, stop, run_manager, **kwargs)
    
    async def _agenerate(
        self,
        messages: List[BaseMessage],
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> LLMResult:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º _agenerate –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
        return await super()._agenerate(messages, stop, run_manager, **kwargs)
