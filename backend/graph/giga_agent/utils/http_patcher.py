"""
–ü–∞—Ç—á–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GigaChat API
"""
import json
import logging
import httpx
from typing import Any, Dict
from giga_agent.utils.gigachat_modes import get_gigachat_mode_manager

logger = logging.getLogger(__name__)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
_original_httpx_post = None
_original_httpx_async_post = None


def patch_httpx():
    """–ü–∞—Ç—á–∏—Ç httpx –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GigaChat API"""
    global _original_httpx_post, _original_httpx_async_post
    
    if _original_httpx_post is not None:
        logger.info("üîß HTTP –ø–∞—Ç—á–µ—Ä —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω")
        return
    
    logger.info("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ HTTP –ø–∞—Ç—á–µ—Ä–∞ –¥–ª—è GigaChat API")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    _original_httpx_post = httpx.Client.post
    _original_httpx_async_post = httpx.AsyncClient.post
    
    def patched_post(self, url, *args, **kwargs):
        if "gigachat.devices.sberbank.ru" in str(url) or "api.giga.chat" in str(url):
            logger.info("üîç HTTP –ü–ê–¢–ß–ï–†: –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω HTTP POST –∑–∞–ø—Ä–æ—Å –∫ GigaChat")
            if 'json' in kwargs:
                logger.info(f"üì• –ò—Å—Ö–æ–¥–Ω—ã–π JSON: {json.dumps(kwargs['json'], ensure_ascii=False, indent=2)}")
                kwargs['json'] = modify_gigachat_request(kwargs['json'])
                logger.info(f"üì§ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON: {json.dumps(kwargs['json'], ensure_ascii=False, indent=2)}")
        return _original_httpx_post(self, url, *args, **kwargs)
    
    async def patched_async_post(self, url, *args, **kwargs):
        if "gigachat.devices.sberbank.ru" in str(url) or "api.giga.chat" in str(url):
            logger.info("üîç HTTP –ü–ê–¢–ß–ï–†: –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω async HTTP POST –∑–∞–ø—Ä–æ—Å –∫ GigaChat")
            if 'json' in kwargs:
                logger.info(f"üì• –ò—Å—Ö–æ–¥–Ω—ã–π JSON: {json.dumps(kwargs['json'], ensure_ascii=False, indent=2)}")
                kwargs['json'] = modify_gigachat_request(kwargs['json'])
                logger.info(f"üì§ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON: {json.dumps(kwargs['json'], ensure_ascii=False, indent=2)}")
        return await _original_httpx_async_post(self, url, *args, **kwargs)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏
    httpx.Client.post = patched_post
    httpx.AsyncClient.post = patched_async_post
    
    logger.info("‚úÖ HTTP –ø–∞—Ç—á–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")


def modify_gigachat_request(data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat API
    
    Args:
        data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    """
    logger.info("üöÄ HTTP –ü–ê–¢–ß–ï–†: –ù–∞—á–∞–ª–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º–æ–≤
    mode_manager = get_gigachat_mode_manager()
    logger.info(f"üéØ HTTP –ü–ê–¢–ß–ï–†: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode_manager.get_mode().value}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    modified_data = mode_manager.modify_request_data(data)
    
    logger.info("‚úÖ HTTP –ü–ê–¢–ß–ï–†: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    return modified_data


def unpatch_httpx():
    """–£–±–∏—Ä–∞–µ—Ç –ø–∞—Ç—á–∏ httpx"""
    global _original_httpx_post, _original_httpx_async_post
    
    if _original_httpx_post is None:
        return
    
    logger.info("üîß –£–¥–∞–ª–µ–Ω–∏–µ HTTP –ø–∞—Ç—á–µ—Ä–∞")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    httpx.Client.post = _original_httpx_post
    httpx.AsyncClient.post = _original_httpx_async_post
    
    _original_httpx_post = None
    _original_httpx_async_post = None
    
    logger.info("‚úÖ HTTP –ø–∞—Ç—á–µ—Ä —É–¥–∞–ª–µ–Ω")
