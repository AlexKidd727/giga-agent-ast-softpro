import copy
import json
import os
import re
import traceback
from datetime import datetime
from typing import Literal
from uuid import uuid4

from genson import SchemaBuilder

# –ü—Ä–∏–º–µ–Ω—è–µ–º HTTP –ø–∞—Ç—á–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GigaChat API
import logging
logger = logging.getLogger(__name__)
logger.info("üîß TOOL_GRAPH: –ò–º–ø–æ—Ä—Ç HTTP –ø–∞—Ç—á–µ—Ä–∞...")
from giga_agent.utils.http_patcher import patch_httpx
logger.info("üîß TOOL_GRAPH: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ HTTP –ø–∞—Ç—á–µ—Ä–∞...")
patch_httpx()
logger.info("üîß TOOL_GRAPH: HTTP –ø–∞—Ç—á–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω!")

from langchain_core.messages import (
    AIMessage,
    ToolMessage,
)
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langgraph.graph import StateGraph
from langgraph.prebuilt.tool_node import _handle_tool_error, ToolNode
import gigachat.exceptions
from langgraph.store.base import BaseStore
from langgraph.types import interrupt

from giga_agent.config import (
    AgentState,
    REPL_TOOLS,
    SERVICE_TOOLS,
    AGENT_MAP,
    load_llm,
)
from giga_agent.prompts.few_shots import FEW_SHOTS_ORIGINAL, FEW_SHOTS_UPDATED
from giga_agent.prompts.main_prompt import SYSTEM_PROMPT
from giga_agent.repl_tools.utils import describe_repl_tool
from giga_agent.tool_server.tool_client import ToolClient
from giga_agent.utils.env import load_project_env
from giga_agent.utils.jupyter import JupyterClient
import re


def parse_function_calls_from_text(message):
    """–ü–∞—Ä—Å–∏—Ç –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ LLM - –¢–û–õ–¨–ö–û JSON —Ñ–æ—Ä–º–∞—Ç"""
    content = message.content
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø—É—Ç—å)
    import tempfile
    import os
    log_dir = tempfile.gettempdir()
    log_file = os.path.join(log_dir, "parsing_debug.log")
    
    try:
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(f"üîç –ü–ê–†–°–ò–ù–ì: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç: {content[:200]}...\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
    
    print(f"üîç –ü–ê–†–°–ò–ù–ì: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç: {content[:200]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω–µ –ø–∞—Ä—Å–∏–º
    result_indicators = [
        # Tinkoff –∞–≥–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è",
        "–ü–û–ó–ò–¶–ò–ò –í –ü–û–†–¢–§–ï–õ–ï",
        "FIGI:",
        "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:",
        "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:",
        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
        "–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å",
        "–°–í–û–î–ö–ê –ü–û –ü–û–†–¢–§–ï–õ–Æ",
        "–î–µ–π—Å—Ç–≤–∏–µ: tinkoff_agent",
        
        # Calendar –∞–≥–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        "—Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
        "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
        "–∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω",
        "–î–µ–π—Å—Ç–≤–∏–µ: calendar_agent",
        
        # Weather —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        "—Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞",
        "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        "–≤–ª–∞–∂–Ω–æ—Å—Ç—å",
        "–î–µ–π—Å—Ç–≤–∏–µ: weather",
        
        # –û–±—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
        "–î–µ–π—Å—Ç–≤–∏–µ:",
        "‚úÖ",
        "‚ùå",
        "‚ö†Ô∏è"
    ]
    
    if any(indicator in content for indicator in result_indicators):
        print("üîç –ü–ê–†–°–ò–ù–ì: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥")
        try:
            with open(log_file, "a", encoding="utf-8") as f:
                f.write("üîç –ü–ê–†–°–ò–ù–ì: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
        return message
    
    # –¢–û–õ–¨–ö–û JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤
    # –ò—â–µ–º –ø–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç —Å name –∏ args
    json_patterns = [
        r'\{"name":\s*"(\w+_agent)",\s*"args":\s*\{[^}]*"user_request":\s*"([^"]+)"[^}]*"user_id":\s*"([^"]+)"[^}]*\}\}',
        r'\{"name":\s*"(\w+_agent)",\s*"args":\s*\{[^}]*"user_request":\s*"([^"]+)"[^}]*\}\}',
    ]
    
    tool_calls = []
    
    # –ò—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç
    seen_calls = set()  # –î–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    
    for pattern in json_patterns:
        matches = re.findall(pattern, content)
        print(f"üîç –ü–ê–†–°–ò–ù–ì: JSON –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        for match in matches:
            if len(match) == 3:
                agent_name, user_request, user_id = match
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                call_key = f"{agent_name}:{user_request}:{user_id}"
                if call_key not in seen_calls:
                    seen_calls.add(call_key)
                    tool_calls.append({
                        "name": agent_name,
                        "args": {
                            "user_request": user_request,
                            "user_id": user_id
                        },
                        "id": f"call_{len(tool_calls) + 1}"
                    })
                    print(f"üîç –ü–ê–†–°–ò–ù–ì: –ù–∞–π–¥–µ–Ω JSON –≤—ã–∑–æ–≤ {agent_name} —Å user_request='{user_request}', user_id='{user_id}'")
                else:
                    print(f"üîç –ü–ê–†–°–ò–ù–ì: –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ {agent_name} —Å user_request='{user_request}'")
            elif len(match) == 2:
                agent_name, user_request = match
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                call_key = f"{agent_name}:{user_request}:default_user"
                if call_key not in seen_calls:
                    seen_calls.add(call_key)
                    tool_calls.append({
                        "name": agent_name,
                        "args": {
                            "user_request": user_request,
                            "user_id": "default_user"
                        },
                        "id": f"call_{len(tool_calls) + 1}"
                    })
                    print(f"üîç –ü–ê–†–°–ò–ù–ì: –ù–∞–π–¥–µ–Ω JSON –≤—ã–∑–æ–≤ {agent_name} —Å user_request='{user_request}'")
                else:
                    print(f"üîç –ü–ê–†–°–ò–ù–ì: –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ {agent_name} —Å user_request='{user_request}'")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if not tool_calls:
        print("üîç –ü–ê–†–°–ò–ù–ì: JSON –≤—ã–∑–æ–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å
        content_lower = content.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        agent_name = None
        if any(word in content_lower for word in ["tinkoff", "–ø–æ—Ä—Ç—Ñ–µ–ª—å", "–∞–∫—Ü–∏–∏", "–æ–ø–µ—Ä–∞—Ü–∏–∏", "–∫—É–ø–∏", "–ø—Ä–æ–¥–∞–π", "–≥—Ä–∞—Ñ–∏–∫", "–º–µ—á–µ–ª", "sber", "–≥–∞–∑–ø—Ä–æ–º", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç", "—Å–±–µ—Ä–±–∞–Ω–∫"]):
            agent_name = "tinkoff_agent"
        elif any(word in content_lower for word in ["calendar", "–∫–∞–ª–µ–Ω–¥–∞—Ä—å", "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "—Å–æ–±—ã—Ç–∏–µ", "–≤—Å—Ç—Ä–µ—á–∞"]):
            agent_name = "calendar_agent"
        elif any(word in content_lower for word in ["–ø–æ–≥–æ–¥–∞", "weather"]):
            agent_name = "weather"
        elif any(word in content_lower for word in ["–ø–æ–∏—Å–∫", "search", "–Ω–∞–π–¥–∏"]):
            agent_name = "search"
        
        if agent_name:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context_patterns = [
                r'–ü–µ—Ä–µ–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É\s+\w+\s+–¥–ª—è\s+(.+?)(?:\.|$)',
                r'–≤—ã–∑–≤–∞—Ç—å\s+\w+\s+–¥–ª—è\s+(.+?)(?:\.|$)',
                r'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\s+\w+\s+–¥–ª—è\s+(.+?)(?:\.|$)',
                r'–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫\s+\w+\s+—Å\s+(.+?)(?:\.|$)',
                r'–ü–µ—Ä–µ–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É\s+\w+\s+(.+?)(?:\.|$)',
                r'–≤—ã–∑–≤–∞—Ç—å\s+\w+\s+(.+?)(?:\.|$)',
                r'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\s+\w+\s+(.+?)(?:\.|$)',
            ]
            
            user_request = None
            for pattern in context_patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                if matches:
                    user_request = matches[0].strip()
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∏—â–µ–º –≤ JSON-–ø–æ–¥–æ–±–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
            if not user_request:
                json_like_patterns = [
                    r'"user_request":\s*"([^"]+)"',
                    r"'user_request':\s*'([^']+)'",
                    r'user_request:\s*"([^"]+)"',
                    r'user_request:\s*\'([^\']+)\'',
                ]
                
                for pattern in json_like_patterns:
                    matches = re.findall(pattern, content)
                    if matches:
                        user_request = matches[0].strip()
                        break
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –∑–∞–ø—Ä–æ—Å
            if not user_request:
                clean_content = re.sub(r'(–ü–ª–∞–Ω:|–ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞\.|–û–∂–∏–¥–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.*)', '', content, flags=re.IGNORECASE)
                clean_content = re.sub(r'<[^>]+>', '', clean_content)  # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
                clean_content = re.sub(r'\{[^}]*\}', '', clean_content)  # –£–±–∏—Ä–∞–µ–º JSON-–ø–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                user_request = clean_content.strip()
            
            if user_request and len(user_request) > 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                call_key = f"{agent_name}:{user_request}:default_user"
                if call_key not in seen_calls:
                    seen_calls.add(call_key)
                    tool_calls.append({
                        "name": agent_name,
                        "args": {
                            "user_request": user_request,
                            "user_id": "default_user"
                        },
                        "id": f"call_{len(tool_calls) + 1}"
                    })
                    print(f"üîç –ü–ê–†–°–ò–ù–ì: –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤—ã–∑–æ–≤ {agent_name} —Å user_request='{user_request}'")
                else:
                    print(f"üîç –ü–ê–†–°–ò–ù–ì: –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤—ã–∑–æ–≤ {agent_name} —Å user_request='{user_request}'")
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å tool_calls
    if tool_calls:
        print(f"üîç –ü–ê–†–°–ò–ù–ì: –ù–∞–π–¥–µ–Ω–æ {len(tool_calls)} –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π, —Å–æ–∑–¥–∞—é AIMessage —Å tool_calls")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        try:
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(f"üîç –ü–ê–†–°–ò–ù–ì: –ù–∞–π–¥–µ–Ω–æ {len(tool_calls)} –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π\n")
                for i, call in enumerate(tool_calls):
                    f.write(f"  {i+1}. {call['name']}({call['args']})\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
        
        # –£–¥–∞–ª—è–µ–º JSON –≤—ã–∑–æ–≤—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        clean_content = content
        for pattern in json_patterns:
            clean_content = re.sub(pattern, '', clean_content)
        clean_content = clean_content.strip()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å tool_calls
        from langchain_core.messages import AIMessage
        result_message = AIMessage(
            content=clean_content,
            tool_calls=tool_calls
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(f"üîç –ü–ê–†–°–ò–ù–ì: –°–æ–∑–¥–∞–Ω–æ AIMessage —Å {len(tool_calls)} tool_calls\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
            
        return result_message
    
    # –ï—Å–ª–∏ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("üîç –ü–ê–†–°–ò–ù–ì: –í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    try:
        with open(log_file, "a", encoding="utf-8") as f:
            f.write("üîç –ü–ê–†–°–ò–ù–ì: –í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
    
    return message


async def get_gigachat_token_info() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö GigaChat"""
    try:
        import aiohttp
        import os
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        credentials = os.getenv("MAIN_GIGACHAT_CREDENTIALS") or os.getenv("GIGACHAT_CREDENTIALS")
        if not credentials:
            return "‚ùå –¢–æ–∫–µ–Ω GigaChat –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ MAIN_GIGACHAT_CREDENTIALS –∏–ª–∏ GIGACHAT_CREDENTIALS."
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º credentials (base64)
        import base64
        try:
            decoded_credentials = base64.b64decode(credentials).decode('utf-8')
            client_id, client_secret = decoded_credentials.split(':')
        except Exception as decode_error:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(decode_error)}"
        
        # –ü–æ–ª—É—á–∞–µ–º access token
        auth_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        auth_data = {
            "scope": "GIGACHAT_API_PERS"
        }
        auth_headers = {
            "Authorization": f"Basic {credentials}",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(auth_url, data=auth_data, headers=auth_headers) as resp:
                if resp.status == 200:
                    auth_response = await resp.json()
                    access_token = auth_response.get("access_token")
                    
                    if access_token:
                        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
                        token_url = "https://gigachat.devices.sberbank.ru/api/v1/token"
                        token_headers = {
                            "Authorization": f"Bearer {access_token}"
                        }
                        
                        async with session.get(token_url, headers=token_headers) as token_resp:
                            if token_resp.status == 200:
                                token_data = await token_resp.json()
                                return f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö:**\n" \
                                       f"‚Ä¢ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {token_data.get('token_limit', 'N/A')}\n" \
                                       f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {token_data.get('used_tokens', 'N/A')}\n" \
                                       f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {token_data.get('remaining_tokens', 'N/A')}"
                            else:
                                token_error_text = await token_resp.text()
                                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö: {token_resp.status} - {token_error_text}"
                    else:
                        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                else:
                    auth_error_text = await resp.text()
                    return f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {resp.status} - {auth_error_text}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö: {str(e)}"


async def handle_gigachat_error_async(e: Exception, flag: bool = False) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ GigaChat —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–∞—Ö"""
    if isinstance(e, gigachat.exceptions.ResponseError):
        error_msg = str(e)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
        token_info = await get_gigachat_token_info()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        additional_info = ""
        if "402" in error_msg or "payment required" in error_msg.lower():
            additional_info = "\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–ø–ª–∞—Ç—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ GigaChat."
        elif "quota" in error_msg.lower() or "limit" in error_msg.lower():
            additional_info = "\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤."
        elif "unauthorized" in error_msg.lower() or "401" in error_msg:
            additional_info = "\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        elif "422" in error_msg or "properties.state.properties" in error_msg:
            additional_info = "\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ—Ä—Å–∏–µ–π API –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ
        main_message = f"‚ùå **–û—à–∏–±–∫–∞ GigaChat API**\n\n{additional_info}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è –±–ª–æ–∫–µ
        details = f"**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:**\n{error_msg}\n\n{token_info}"
        
        return f"{main_message}\n\n<details>\n<summary>üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏</summary>\n\n{details}\n</details>"
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        return _handle_tool_error(e, flag=flag)


def handle_gigachat_error(e: Exception, flag: bool = False) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ GigaChat (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    if isinstance(e, gigachat.exceptions.ResponseError):
        error_msg = str(e)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –∏–∑ –æ—à–∏–±–∫–∏
        token_info = ""
        if "402" in error_msg or "payment required" in error_msg.lower():
            token_info = "\n\nüí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö:** –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–ø–ª–∞—Ç—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ GigaChat."
        elif "quota" in error_msg.lower() or "limit" in error_msg.lower():
            token_info = "\n\nüí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö:** –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ GigaChat."
        elif "unauthorized" in error_msg.lower() or "401" in error_msg:
            token_info = "\n\nüí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö:** –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        elif "422" in error_msg or "properties.state.properties" in error_msg:
            token_info = "\n\nüí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö:** –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ—Ä—Å–∏–µ–π API –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ
        main_message = f"‚ùå **–û—à–∏–±–∫–∞ GigaChat API**\n\n{token_info}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è –±–ª–æ–∫–µ
        details = f"**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:**\n{error_msg}"
        
        return f"{main_message}\n\n<details>\n<summary>üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏</summary>\n\n{details}\n</details>"
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        return _handle_tool_error(e, flag=flag)
from giga_agent.utils.lang import LANG
from giga_agent.utils.python import prepend_code

load_project_env()

llm = load_llm(is_main=True)


def generate_repl_tools_description():
    repl_tools = []
    for repl_tool in REPL_TOOLS:
        repl_tools.append(describe_repl_tool(repl_tool))
    service_tools = [tool.name for tool in SERVICE_TOOLS]
    repl_tools = "\n".join(repl_tools)
    return f"""–í –∫–æ–¥–µ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
```
{repl_tools}
```
–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–¥–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {service_tools}. –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ–ø–∏—Å–∞–Ω—ã –≤ —Ç–≤–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö!
–í—ã–∑—ã–≤–∞–π —ç—Ç–∏ –º–µ—Ç–æ–¥—ã, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞–≥—Ä—É–º–µ–Ω—Ç—ã"""


prompt = ChatPromptTemplate.from_messages(
    [
        ("system", SYSTEM_PROMPT),
    ]
    + (
        FEW_SHOTS_ORIGINAL
        if os.getenv("REPL_FROM_MESSAGE", "1") == "1"
        else FEW_SHOTS_UPDATED
    )
    + [MessagesPlaceholder("messages", optional=True)]
).partial(repl_inner_tools=generate_repl_tools_description(), language=LANG)


def generate_user_info(state: AgentState):
    lang = ""
    if not LANG.startswith("ru"):
        lang = f"\n–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {LANG}\n"
    return f"<user_info>\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {datetime.today().strftime('%d.%m.%Y %H:%M')}{lang}</user_info>"


def get_code_arg(message):
    regex = r"```python(.+?)```"
    matches = re.findall(regex, message, re.DOTALL)
    if matches:
        return "\n".join(matches).strip()


client = JupyterClient(
    base_url=os.getenv("JUPYTER_CLIENT_API", "http://127.0.0.1:9090")
)


async def agent(state: AgentState):
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ agent (Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø—É—Ç—å)
    import tempfile
    import os
    log_dir = tempfile.gettempdir()
    log_file = os.path.join(log_dir, "agent_debug.log")
    
    try:
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(f"üîç AGENT: –§—É–Ω–∫—Ü–∏—è agent –≤—ã–∑–≤–∞–Ω–∞\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –∞–≥–µ–Ω—Ç–∞: {e}")
    
    tool_client = ToolClient(
        base_url=os.getenv("TOOL_CLIENT_API", "http://127.0.0.1:9091")
    )
    kernel_id = state.get("kernel_id")
    tools = state.get("tools")
    file_ids = []
    if not kernel_id:
        kernel_id = (await client.start_kernel())["id"]
        await client.execute(kernel_id, "function_results = []")
    if not tools:
        tools = await tool_client.get_tools()
    ch = (prompt | llm.bind_tools(tools, parallel_tool_calls=False)).with_retry()
    if state["messages"][-1].type == "human":
        user_input = state["messages"][-1].content
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ additional_kwargs
        if hasattr(state["messages"][-1], 'additional_kwargs'):
            files = state["messages"][-1].additional_kwargs.get("files", [])
        else:
            files = []
        file_prompt = []
        for idx, file in enumerate(files):
            file_prompt.append(
                f"""–§–∞–π–ª ![](graph:{idx})\n–ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ –ø—É—Ç–∏: '{file['path']}'"""
            )
            if "file_id" in file:
                file_prompt[
                    -1
                ] += f"\n–§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ–≥–æ id: '{file['file_id']}'"
                file_ids.append(file["file_id"])
        file_prompt = (
            "<files_data>" + "\n----\n".join(file_prompt) + "</files_data>"
            if len(file_prompt)
            else ""
        )
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ additional_kwargs –¥–ª—è selected
        if hasattr(state["messages"][-1], 'additional_kwargs'):
            selected = state["messages"][-1].additional_kwargs.get("selected", {})
        else:
            selected = {}
        selected_items = []
        for key, value in selected.items():
            selected_items.append(f"""![{value}](graph:{key})""")
        selected_prompt = ""
        if selected_items:
            selected_items = "\n".join(selected_items)
            selected_prompt = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è: \n{selected_items}"
            )
        state["messages"][
            -1
        ].content = f"<task>{user_input}</task> –ê–∫—Ç–∏–≤–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–π –∏ —Å–ª–µ–¥—É–π —Å–≤–æ–µ–º—É –ø–ª–∞–Ω—É! –î–µ–π—Å—Ç–≤—É–π –ø–æ –ø—Ä–æ—Å—Ç—ã–º —à–∞–≥–∞–º!{generate_user_info(state)}\n{file_prompt}\n{selected_prompt}\n–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: "
    
    try:
        message = await ch.ainvoke({"messages": state["messages"]})
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
        try:
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(f"üîç AGENT: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM: {message.content[:200]}...\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –∞–≥–µ–Ω—Ç–∞: {e}")
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
        parsed_message = parse_function_calls_from_text(message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
        try:
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(f"üîç AGENT: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ - has tool_calls: {hasattr(parsed_message, 'tool_calls') and bool(parsed_message.tool_calls)}\n")
                if hasattr(parsed_message, 'tool_calls') and parsed_message.tool_calls:
                    f.write(f"üîç AGENT: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ tool_calls: {len(parsed_message.tool_calls)}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –∞–≥–µ–Ω—Ç–∞: {e}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å additional_kwargs
        if hasattr(parsed_message, 'additional_kwargs'):
            parsed_message.additional_kwargs.pop("function_call", None)
            parsed_message.additional_kwargs["rendered"] = True
        return {
            "messages": [state["messages"][-1], parsed_message],
            "kernel_id": kernel_id,
            "tools": tools,
            "file_ids": file_ids,
        }
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∏ GigaChat API)
        error_content = await handle_gigachat_error_async(e, flag=True)
        error_message = AIMessage(content=error_content)
        return {
            "messages": [state["messages"][-1], error_message],
            "kernel_id": kernel_id,
            "tools": tools,
            "file_ids": file_ids,
        }


async def tool_call(
    state: AgentState,
    store: BaseStore,
):
    tool_client = ToolClient(
        base_url=os.getenv("TOOL_CLIENT_API", "http://127.0.0.1:9091")
    )
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ tool_calls
    last_message = state["messages"][-1]
    if not hasattr(last_message, 'tool_calls') or not last_message.tool_calls:
        raise ValueError("No tool_calls found in the last message")
    action = copy.deepcopy(last_message.tool_calls[0])
    value = interrupt({"type": "approve"})
    if value.get("type") == "comment":
        return {
            "messages": ToolMessage(
                tool_call_id=action.get("id", str(uuid4())),
                content=json.dumps(
                    {
                        "message": f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "{value.get("message")}"'
                    },
                    ensure_ascii=False,
                ),
            )
        }
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–º–µ–Ω–∏–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    tool_call_index = state.get("tool_call_index", -1)
    if action.get("name") == "python":
        if os.getenv("REPL_FROM_MESSAGE", "1") == "1":
            action["args"]["code"] = get_code_arg(state["messages"][-1].content)
        else:
            # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≥–∏–≥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞—Ä–≥—É–º–µ–Ω—Ç ```python(.+)``` —Å—Ç—Ä–æ–∫—É
            code_arg = get_code_arg(action["args"].get("code"))
            if code_arg:
                action["args"]["code"] = code_arg
        if "code" not in action["args"] or not action["args"]["code"]:
            return {
                "messages": ToolMessage(
                    tool_call_id=action.get("id", str(uuid4())),
                    content=json.dumps(
                        {"message": "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –≤ —Å–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!"},
                        ensure_ascii=False,
                    ),
                )
            }
        action["args"]["code"] = prepend_code(action["args"]["code"], state)
    file_ids = []
    try:
        state_ = copy.deepcopy(state)
        state_.pop("messages")
        tool_client.set_state(state_)
        if action.get("name") not in AGENT_MAP:
            result = await tool_client.aexecute(action.get("name"), action.get("args"))
        else:
            tool_node = ToolNode(tools=list(AGENT_MAP.values()))
            injected_args = tool_node.inject_tool_args(
                {"name": action.get("name"), "args": action.get("args"), "id": "123"},
                state,
                None,
            )["args"]
            result = await AGENT_MAP[action.get("name")].ainvoke(injected_args)
        tool_call_index += 1
        try:
            result = json.loads(result)
        except Exception as e:
            pass
        if result:
            add_data = {
                "data": result,
                "message": f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `function_results[{tool_call_index}]['data']` ",
            }
            await client.execute(
                state.get("kernel_id"), f"function_results.append({repr(add_data)})"
            )
            if (
                len(json.dumps(result, ensure_ascii=False)) > 10000 * 4
                and action.get("name") not in AGENT_MAP
            ):
                schema = SchemaBuilder()
                schema.add_object(obj=add_data.pop("data"))
                add_data[
                    "message"
                ] += f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—à–µ–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º –∏–∑—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å –ø–æ–º–æ—â—å—é python. –°—Ö–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö:\n"
                add_data["schema"] = schema.to_schema()
            if action.get("name") == "get_urls":
                add_data["message"] += result.pop("attention")
            elif action.get("name") == "search":
                # –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                try:
                    if "data" in result and len(result["data"]) > 0:
                        search_data = result["data"][0]
                        if "results" in search_data and len(search_data["results"]) > 0:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                            main_result = search_data["results"][0]
                            summary = f"–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {main_result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                            summary += f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {main_result.get('content', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                            if len(search_data["results"]) > 1:
                                summary += f"–ù–∞–π–¥–µ–Ω–æ {len(search_data['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.\n"
                            add_data["message"] += f"\n\n–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:\n{summary}"
                        else:
                            add_data["message"] += "\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                    else:
                        add_data["message"] += "\n\n–î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
                except Exception as search_error:
                    add_data["message"] += f"\n\n–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {str(search_error)}"
            elif action.get("name") == "python":
                # –î–ª—è python –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –µ—Å—Ç—å
                add_data = result
        else:
            add_data = result
        tool_attachments = []
        if "giga_attachments" in result:
            add_data = result
            attachments = result.pop("giga_attachments")
            file_ids = [attachment["file_id"] for attachment in attachments]
            for attachment in attachments:
                if attachment["type"] == "text/html":
                    await store.aput(
                        ("html",),
                        attachment["file_id"],
                        attachment,
                        ttl=None,
                    )
                elif attachment["type"] == "audio/mp3":
                    await store.aput(
                        ("audio",),
                        attachment["file_id"],
                        attachment,
                        ttl=None,
                    )
                else:
                    await store.aput(
                        ("attachments",),
                        attachment["file_id"],
                        attachment,
                        ttl=None,
                    )

                tool_attachments.append(
                    {
                        "type": attachment["type"],
                        "file_id": attachment["file_id"],
                    }
                )
        message = ToolMessage(
            tool_call_id=action.get("id", str(uuid4())),
            content=json.dumps(add_data, ensure_ascii=False),
            additional_kwargs={"tool_attachments": tool_attachments},
        )
    except Exception as e:
        traceback.print_exc()
        error_content = await handle_gigachat_error_async(e, flag=True)
        message = ToolMessage(
            tool_call_id=action.get("id", str(uuid4())),
            content=error_content,
        )
        tool_call_index = action.get("index", 0)

    return {
        "messages": [message],
        "tool_call_index": tool_call_index,
        "file_ids": file_ids,
    }


def router(state: AgentState) -> Literal["tool_call", "__end__"]:
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ tool_calls
    last_message = state["messages"][-1]
    if hasattr(last_message, 'tool_calls') and last_message.tool_calls:
        return "tool_call"
    else:
        return "__end__"


workflow = StateGraph(AgentState)
workflow.add_node(agent)
workflow.add_node(tool_call)
workflow.add_edge("__start__", "agent")
workflow.add_conditional_edges("agent", router)
workflow.add_edge("tool_call", "agent")


graph = workflow.compile()
