#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Tinkoff –∞–≥–µ–Ω—Ç–∞ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["TINKOFF_TOKEN"] = "test_token"
os.environ["TINKOFF_ACCOUNT_ID"] = "test_account_id"
os.environ["TINKOFF_SANDBOX"] = "true"

async def test_tinkoff_agent_mock():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Tinkoff –∞–≥–µ–Ω—Ç–∞ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏"""
    
    print("=== –¢–ï–°–¢ TINKOFF –ê–ì–ï–ù–¢–ê (–ú–û–ö-–†–ï–ñ–ò–ú) ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    token = os.getenv("TINKOFF_TOKEN")
    account_id = os.getenv("TINKOFF_ACCOUNT_ID")
    sandbox = os.getenv("TINKOFF_SANDBOX", "true")
    
    print(f"   TINKOFF_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   TINKOFF_ACCOUNT_ID: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if account_id else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   TINKOFF_SANDBOX: {sandbox}")
    
    print("\n2. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π:")
    try:
        from giga_agent.agents.tinkoff_agent import tinkoff_agent
        print("   ‚úÖ –ò–º–ø–æ—Ä—Ç tinkoff_agent —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tinkoff_agent: {e}")
        return False
    
    try:
        from giga_agent.agents.tinkoff_agent.utils.client import get_tinkoff_client
        print("   ‚úÖ –ò–º–ø–æ—Ä—Ç client —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ client: {e}")
        return False
    
    try:
        from giga_agent.agents.tinkoff_agent.utils.tinkoff_client import get_tinkoff_client as get_tinkoff_client_alt
        print("   ‚úÖ –ò–º–ø–æ—Ä—Ç tinkoff_client —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tinkoff_client: {e}")
        return False
    
    print("\n3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:")
    try:
        client = get_tinkoff_client()
        if client:
            print("   ‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"   Sandbox —Ä–µ–∂–∏–º: {client.sandbox}")
            print(f"   Account ID: {client.account_id}")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
    
    print("\n4. –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–∞:")
    try:
        from giga_agent.agents.tinkoff_agent.graph import create_tinkoff_agent
        agent = create_tinkoff_agent()
        print("   ‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –¢–∏–ø –∞–≥–µ–Ω—Ç–∞: {type(agent)}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False
    
    print("\n5. –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞:")
    try:
        from giga_agent.agents.tinkoff_agent.graph import TINKOFF_TOOLS
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(TINKOFF_TOOLS)}")
        for i, tool in enumerate(TINKOFF_TOOLS[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   {i}. {tool.name}")
        if len(TINKOFF_TOOLS) > 5:
            print(f"   ... –∏ –µ—â–µ {len(TINKOFF_TOOLS) - 5} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False
    
    print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    return True

async def test_agent_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–≥–µ–Ω—Ç–∞"""
    
    print("\n=== –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –ê–ì–ï–ù–¢–ê ===\n")
    
    try:
        from giga_agent.agents.tinkoff_agent.graph import create_tinkoff_agent, TINKOFF_PROMPT
        
        print("1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:")
        agent = create_tinkoff_agent()
        print("   ‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        print("\n2. –¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞:")
        print(f"   ‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(str(TINKOFF_PROMPT))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\n3. –¢–µ—Å—Ç —É–∑–ª–æ–≤ –∞–≥–µ–Ω—Ç–∞:")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–∑–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        from giga_agent.agents.tinkoff_agent.nodes import portfolio, orders, instruments, operations
        print("   ‚úÖ –í—Å–µ —É–∑–ª—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        print("\n4. –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        from giga_agent.agents.tinkoff_agent.graph import TINKOFF_TOOLS
        tool_names = [tool.name for tool in TINKOFF_TOOLS]
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tool_names)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        for name in tool_names:
            print(f"      - {name}")
        
        print("\n‚úÖ –°–¢–†–£–ö–¢–£–†–ê –ê–ì–ï–ù–¢–ê –ö–û–†–†–ï–ö–¢–ù–ê!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Tinkoff –∞–≥–µ–Ω—Ç–∞ (–º–æ–∫-—Ä–µ–∂–∏–º)...\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success = asyncio.run(test_tinkoff_agent_mock())
    
    if success:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        asyncio.run(test_agent_structure())
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìù –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º API:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ Tinkoff Invest")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("      TINKOFF_TOKEN=your_token")
        print("      TINKOFF_ACCOUNT_ID=your_account_id")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_tinkoff_agent.py")
    else:
        print("\nüí• –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –° –û–®–ò–ë–ö–ê–ú–ò!")
        sys.exit(1)
