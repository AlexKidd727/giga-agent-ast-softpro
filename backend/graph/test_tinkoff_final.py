#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Tinkoff –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

async def test_tinkoff_agent_real():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Tinkoff –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API"""
    
    print("=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ TINKOFF –ê–ì–ï–ù–¢–ê ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    token = os.getenv("TINKOFF_TOKEN")
    account_id = os.getenv("TINKOFF_ACCOUNT_ID")
    sandbox = os.getenv("TINKOFF_SANDBOX", "true")
    
    print(f"   TINKOFF_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   TINKOFF_ACCOUNT_ID: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if account_id else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   TINKOFF_SANDBOX: {sandbox}")
    
    if not token or not account_id:
        print("\n‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   TINKOFF_TOKEN - —Ç–æ–∫–µ–Ω API")
        print("   TINKOFF_ACCOUNT_ID - ID —Å—á–µ—Ç–∞")
        print("\nüìù –ü—Ä–∏–º–µ—Ä:")
        print("   set TINKOFF_TOKEN=your_token_here")
        print("   set TINKOFF_ACCOUNT_ID=your_account_id_here")
        return False
    
    print("\n2. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:")
    try:
        from giga_agent.agents.tinkoff_agent.utils.client import get_tinkoff_client
        client = get_tinkoff_client()
        if client:
            connection_result = client.check_connection()
            if connection_result.get("success"):
                print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API —É—Å–ø–µ—à–Ω–æ")
                print(f"   Sandbox —Ä–µ–∂–∏–º: {connection_result.get('sandbox_mode')}")
                print(f"   –ù–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {connection_result.get('account_found')}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {connection_result.get('accounts_count')}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_result.get('error')}")
                return False
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    print("\n3. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
    try:
        from giga_agent.agents.tinkoff_agent.nodes.instruments import search_instrument
        result = await search_instrument.ainvoke({"ticker": "SBER", "instrument_type": "shares"})
        print("   ‚úÖ –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:200]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False
    
    print("\n4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è:")
    try:
        from giga_agent.agents.tinkoff_agent.nodes.portfolio import get_portfolio_summary
        result = await get_portfolio_summary.ainvoke({"user_id": "test_user"})
        print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:200]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return False
    
    print("\n5. –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞:")
    try:
        from giga_agent.agents.tinkoff_agent import tinkoff_agent
        result = await tinkoff_agent.ainvoke({"user_request": "–ø–æ–∫–∞–∂–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å", "user_id": "test_user"})
        print("   ‚úÖ –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –û—Ç–≤–µ—Ç: {result[:200]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False
    
    print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("\nüéâ TINKOFF –ê–ì–ï–ù–¢ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    return True

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ Tinkoff –∞–≥–µ–Ω—Ç–∞...\n")
    
    success = asyncio.run(test_tinkoff_agent_real())
    
    if success:
        print("\nüöÄ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        print("   - –ù–∞–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ —Ç–∏–∫–µ—Ä—É")
        print("   - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
        print("   - –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")
        print("   - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏")
        print("   - –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ...")
    else:
        print("\nüí• –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –° –û–®–ò–ë–ö–ê–ú–ò!")
        sys.exit(1)
