#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Tinkoff –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

async def test_tinkoff_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Tinkoff –∞–≥–µ–Ω—Ç–∞"""
    
    print("=== –¢–ï–°–¢ TINKOFF –ê–ì–ï–ù–¢–ê ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    token = os.getenv("TINKOFF_TOKEN")
    account_id = os.getenv("TINKOFF_ACCOUNT_ID")
    sandbox = os.getenv("TINKOFF_SANDBOX", "true")
    
    print(f"   TINKOFF_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   TINKOFF_ACCOUNT_ID: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if account_id else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   TINKOFF_SANDBOX: {sandbox}")
    
    if not token or not account_id:
        print("\n‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   TINKOFF_TOKEN - —Ç–æ–∫–µ–Ω API")
        print("   TINKOFF_ACCOUNT_ID - ID —Å—á–µ—Ç–∞")
        return False
    
    print("\n2. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π:")
    try:
        from giga_agent.agents.tinkoff_agent import tinkoff_agent
        print("   ‚úÖ –ò–º–ø–æ—Ä—Ç tinkoff_agent —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tinkoff_agent: {e}")
        return False
    
    try:
        from giga_agent.agents.tinkoff_agent.utils.client import get_tinkoff_client
        print("   ‚úÖ –ò–º–ø–æ—Ä—Ç client —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ client: {e}")
        return False
    
    try:
        from giga_agent.agents.tinkoff_agent.utils.tinkoff_client import get_tinkoff_client as get_tinkoff_client_alt
        print("   ‚úÖ –ò–º–ø–æ—Ä—Ç tinkoff_client —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tinkoff_client: {e}")
        return False
    
    print("\n3. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:")
    try:
        client = get_tinkoff_client()
        if client:
            connection_result = client.check_connection()
            if connection_result.get("success"):
                print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API —É—Å–ø–µ—à–Ω–æ")
                print(f"   Sandbox —Ä–µ–∂–∏–º: {connection_result.get('sandbox_mode')}")
                print(f"   –ù–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {connection_result.get('account_found')}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {connection_result.get('accounts_count')}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_result.get('error')}")
                return False
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    print("\n4. –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞:")
    try:
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        result = await tinkoff_agent("–ø–æ–∫–∞–∂–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å", "test_user")
        print("   ‚úÖ –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã")
        print(f"   –û—Ç–≤–µ—Ç: {result[:100]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False
    
    print("\n5. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
    try:
        from giga_agent.agents.tinkoff_agent.nodes.instruments import search_instrument
        result = await search_instrument("SBER", "shares")
        print("   ‚úÖ –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False
    
    print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    return True

async def test_agent_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
    
    print("\n=== –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ô –ê–ì–ï–ù–¢–ê ===\n")
    
    try:
        from giga_agent.agents.tinkoff_agent.nodes.portfolio import get_portfolio_summary
        from giga_agent.agents.tinkoff_agent.nodes.instruments import find_figi_by_ticker
        from giga_agent.agents.tinkoff_agent.nodes.operations import get_operations_today
        
        print("1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:")
        result = await get_portfolio_summary()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:150]}...")
        
        print("\n2. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ FIGI:")
        result = await find_figi_by_ticker("SBER")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:150]}...")
        
        print("\n3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
        result = await get_operations_today()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:150]}...")
        
        print("\n‚úÖ –¢–ï–°–¢–´ –§–£–ù–ö–¶–ò–ô –ü–†–û–ô–î–ï–ù–´!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Tinkoff –∞–≥–µ–Ω—Ç–∞...\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success = asyncio.run(test_tinkoff_agent())
    
    if success:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
        asyncio.run(test_agent_functions())
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("\nüí• –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –° –û–®–ò–ë–ö–ê–ú–ò!")
        sys.exit(1)
